<!--
 * @Author: fuping
 * @Date: 2020-04-16 15:04:59
 * @LastEditors: fuping
 * @LastEditTime: 2020-05-09 15:44:33
 * @Description: 
 -->
<template>
  <div :class="flowUser.main">
    <div :class="flowUser.dateBox">
      <BorderBox title="筛选查询" type="search">
        <VForm :option="formDateOp" ref="formDate"></VForm>
      </BorderBox>
    </div>
    <div :class="flowUser.contentBox">
      <div :class="flowUser.chartBox">
        <BorderBox title="" type="bar">
          <div :class="flowUser.tabsBox">
            <div :class="flowUser.tabBox">
              <el-tabs v-model="activeName" type="card" @tab-click="handleTabClick">
                <el-tab-pane label="TOP流量" name="zhu"></el-tab-pane>
                <el-tab-pane label="TOP连接数" name="lian"></el-tab-pane>
              </el-tabs>
            </div>
            <div :class="flowUser.infoBox">
              <span>
                未备案IP：
                <i>{{ totalInfo.unIp || 0 }}</i>
              </span>
              <span>
                活跃IP：
                <i>{{ totalInfo.acIp || 0 }}</i>
              </span>
            </div>
          </div>
          <div :class="flowUser.charWrap">
            <BaseCharts :option="barLineOption" :theme="'vintage'"></BaseCharts>
          </div>
        </BorderBox>
      </div>
      <div :class="flowUser.tableBox">
        <BorderBox title="" type="table">
          <VTable
            :option="tableOpt"
            :height="tableHeight"
            ref="table"
            @handleCurrentPageChange="handleCurrentChange1"
            @handleSizePageChange="handleSizeChange1"
          ></VTable>
        </BorderBox>
      </div>
    </div>
    <el-dialog :title="chartTitle" :visible.sync="chartShow" width="80%">
      <BaseCharts :option="stackBarLineOp" :theme="'vintage'" style="height: 350px"></BaseCharts>
    </el-dialog>
    <el-dialog :title="tableTitle" :visible.sync="tableShow" width="70%">
      <VTable
        :option="dialogTableOpt"
        :height="dialogTableHeight"
        @handleCurrentPageChange="handleCurrentChange2"
        @handleSizePageChange="handleSizeChange2"
      ></VTable>
    </el-dialog>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Ref } from 'vue-property-decorator'
import { barLineOption, stackBarLineOption } from '@/views/Common/charts/chartsOption'
import { http } from '@/common/request'
import BorderBox from '@/components/Common/BorderBox.vue'
import dayjs from 'dayjs'
import defaultsDeep from 'lodash/defaultsDeep'
import replace from 'lodash/replace'
const UrlTotalNum = '/netSecur-web/userflow/UserFlowDataNum' // 总信息
const UrlChart = '/netSecur-web/userflow/userFlowT' // 折柱图
const UrlTable = '/netSecur-web/userflow/userFlowB' // 表格
const UrlFlowProtocol = '/netSecur-web/userflow/UserFlowPopup' // 弹出框-流量连接数趋势
const UrlUser = '/netSecur-web/userflow/UserFlowPopupProtocol' // 弹出框-用户访问数据
interface IDefaultFormItems {
  startDate: string
  endDate: string
  ip?: string
  index?: string
}
interface IParams {
  code: number
  data: number[]
  message: string
}
interface IDefaultTableItems {
  startDate: string
  endDate: string
  sort?: string
  order?: string
  page?: number
  rows?: number
  ip?: string
  index?: string
}
@Component({
  components: {
    BorderBox
  }
})
export default class FlowUser extends Vue {
  @Ref() readonly formDate!: VP.VForm
  @Ref() readonly table!: VP.VTable
  private activeName = 'zhu'
  private tableShow = false
  private tableTitle = ''
  private tableTitleIp: string
  private chartShow = false
  private chartTitle = ''
  private chartTitleIp: string
  // 全局日期选择器
  private formItems: IDefaultFormItems = {
    startDate: dayjs().format('YYYY-MM-DD'),
    endDate: dayjs().format('YYYY-MM-DD')
  }
  // 表格接口参数
  private tableParams: IDefaultTableItems = {
    startDate: this.formItems.startDate,
    endDate: this.formItems.endDate,
    index: this.activeName,
    sort: 'sumBytes',
    order: 'desc',
    page: 1,
    rows: 10,
    ip: ''
  }
  // 弹出框表格接口参数
  private dialogTableParams: IDefaultTableItems = {
    startDate: this.formItems.startDate,
    endDate: this.formItems.endDate,
    ip: this.tableTitleIp,
    sort: 'sumbytes',
    order: 'desc',
    page: 1,
    rows: 50
  }
  private totalInfo = {
    unIp: 0,
    acIp: 0
  }
  private formDateOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '开始时间：',
        type: 'date',
        comOpt: {
          id: 'startDate',
          clearable: false,
          value: dayjs().format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.startDisable
          }
        }
      },
      {
        label: '结束时间：',
        type: 'date',
        comOpt: {
          id: 'endDate',
          clearable: false,
          value: this.formItems.endDate,
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.endDisable
          }
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.handleQueryBtn
        }
      }
    ]
  }
  private tableOpt: any = {
    stripe: true,
    defaultSort: [
      { prop: 'sumBytes', order: 'descending' },
      { prop: 'ip', order: '' },
      { prop: 'filing', order: '' },
      { prop: 'upBytes', order: '' },
      { prop: 'downBytes', order: '' },
      { prop: 'links', order: '' }
    ],
    sortChange: this.sortChange1,
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: 'IP地址', value: 'ip', minWidth: 130, sortable: 'custom', tooltip: true },
      { name: '是否备案', value: 'filing', minWidth: 100, sortable: 'custom', tooltip: true },
      { name: '上行流量', value: 'upBytes', minWidth: 100, sortable: 'custom', tooltip: true },
      { name: '下行流量', value: 'downBytes', minWidth: 100, sortable: 'custom', tooltip: true },
      { name: '连接数', value: 'links', minWidth: 100, sortable: 'custom', tooltip: true },
      { name: '总流量', value: 'sumBytes', minWidth: 100, sortable: 'custom', tooltip: true },
      {
        name: '操作',
        value: '',
        align: 'center',
        // formatter: this.titleFormatter,
        formatter: function(row: any, column: any, cellValue: any, index: any) {
          console.log(row)
          return row
        },
        operations: [
          {
            label: '详情',
            type: 'icon',
            iconName: 'el-icon-edit',
            tooltip: function(row: any) {
              return row.ip + '-流量连接数趋势'
            },
            disCallBack() {
              return false
            },
            handlerClick: this.dialogChart
          },
          {
            label: '查看',
            type: 'icon',
            iconName: 'el-icon-eleme',
            tooltip: function(row: any) {
              return row.ip + '-用户访问数据'
            },
            disCallBack() {
              return false
            },
            handlerClick: this.dialogTable
          }
        ]
      }
    ],
    data: [],
    pagination: true,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [10, 20, 30, 40, 50],
      pageSize: 10
    }
  }
  private dialogTableOpt: any = {
    stripe: true,
    defaultSort: [
      { prop: 'sumbytes', order: 'descending' },
      { prop: 'protocol', order: '' },
      { prop: 'links', order: '' },
      { prop: 'upbytes', order: '' },
      { prop: 'downbytes', order: '' }
    ],
    sortChange: this.sortChange2,
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: '协议名称', value: 'protocol', minWidth: 130, sortable: 'custom', tooltip: true },
      { name: '连接数', value: 'links', sortable: 'custom', tooltip: true },
      { name: '上行流量', value: 'upbytes', sortable: 'custom', tooltip: true },
      { name: '下行流量', value: 'downbytes', sortable: 'custom', tooltip: true },
      { name: '总流量', value: 'sumbytes', sortable: 'custom', tooltip: true }
    ],
    data: [],
    pagination: true,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [10, 20, 30, 40, 50],
      pageSize: 50
    }
  }
  private tableHeight = 'calc(100% - 42px)'
  private dialogTableHeight = '350'
  // echarts bar
  private newbarLineOption = {
    yAxis: [
      {
        name: '流量/GB'
      },
      {
        name: '连接数/万次'
      }
    ]
  } as any
  private newstackBarLineOp = {
    yAxis: [
      {
        name: '流量/GB'
      },
      {
        name: '连接数/次'
      }
    ]
  } as any
  private barLineOption: any = defaultsDeep(this.newbarLineOption, barLineOption)
  private stackBarLineOp: any = defaultsDeep(this.newstackBarLineOp, stackBarLineOption)
  mounted() {
    this.handleQueryBtn()
  }
  // methods
  // 全局查询按钮
  handleQueryBtn() {
    this.formItems = this.formDate.getValue()
    this.tableParams = defaultsDeep(this.formItems, this.tableParams)
    this.tableParams.page = 1
    this.tableParams.ip = ''
    this.getTotalData()
    this.getBarLineData()
    this.getTableData()
  }
  handleTabClick(tab: any) {
    this.activeName = tab.name
    this.getBarLineData()
  }
  getTotalData() {
    const params: IDefaultTableItems = {
      startDate: this.formItems.startDate,
      endDate: this.formItems.endDate,
      ip: ''
    }
    http.post<IParams>(UrlTotalNum, params).then((resp: any) => {
      const { data } = resp
      this.totalInfo = data[0]
    })
  }
  getBarLineData() {
    const params: IDefaultTableItems = {
      startDate: this.formItems.startDate,
      endDate: this.formItems.endDate,
      ip: '',
      index: this.activeName
    }
    http.post<IParams>(UrlChart, params).then((resp: any) => {
      const { data } = resp
      const xAxisData: number[] = []
      const barData = data.filter((i: any) => {
        return i.type === 'bar'
      })
      const lineData = data.filter((i: any) => {
        return i.type === 'line'
      })
      barData.forEach((i: any) => {
        xAxisData.push(i.name)
      })
      if (this.activeName === 'zhu') {
        this.barLineOption.yAxis[0].name = '流量/GB'
        this.barLineOption.yAxis[1].name = '连接数/万次'
        this.barLineOption.series[0].name = '流量'
        this.barLineOption.series[1].name = '连接数'
        this.barLineOption.series[0].data = barData
        this.barLineOption.series[1].data = lineData
      } else {
        this.barLineOption.yAxis[0].name = '连接数/万次'
        this.barLineOption.yAxis[1].name = '流量/GB'
        this.barLineOption.series[1].data = barData
        this.barLineOption.series[0].data = lineData
      }
      this.barLineOption.xAxis[0].data = xAxisData.length > 0 ? xAxisData : ['无数据'] // 数据为空时，x轴显示无数据
    })
  }
  getTableData() {
    this.tableParams.ip = ''
    http.post<IParams>(UrlTable, this.tableParams).then((resp: any) => {
      const {
        data: { rows, total, pageNo }
      } = resp
      this.tableOpt.data = rows
      this.tableOpt.pageOpt.total = total
      this.tableOpt.pageOpt.currentPage = pageNo
    })
  }
  dialogTable(row: any) {
    this.tableShow = true
    this.tableTitleIp = row.ip
    this.tableTitle = `${this.tableTitleIp} -用户访问数据`
    this.getDialogTableData()
  }
  dialogChart(row: any) {
    this.chartShow = true
    this.chartTitleIp = row.ip
    this.chartTitle = `${this.chartTitleIp} -流量连接数趋势`
    this.getDialogChartData()
  }
  getDialogTableData() {
    this.dialogTableParams = defaultsDeep(this.formItems, this.dialogTableParams)
    this.dialogTableParams.ip = this.tableTitleIp
    http.post<IParams>(UrlUser, this.dialogTableParams).then((resp: any) => {
      const {
        data: { rows, total, pageNo }
      } = resp
      this.dialogTableOpt.data = rows
      this.dialogTableOpt.pageOpt.total = total
      this.dialogTableOpt.pageOpt.currentPage = pageNo
    })
  }
  getDialogChartData() {
    const dialogChartParams: IDefaultTableItems = {
      startDate: this.formItems.startDate + ' 00:00:00',
      endDate: this.formItems.endDate + ' 23:59:59',
      ip: this.chartTitleIp
    }
    http.post<IParams>(UrlFlowProtocol, dialogChartParams).then((resp: any) => {
      const { data } = resp
      if (data.length === 0) {
        data.push({
          name: '无数据',
          value: 0
        })
      }
      const xAxisData: number[] = []
      const barData1 = data.filter((i: any) => {
        return i.category === '上行流量'
      })
      const barData2 = data.filter((i: any) => {
        return i.category === '下行流量'
      })
      const lineData = data.filter((i: any) => {
        return i.type === 'line'
      })
      barData1.forEach((i: any) => {
        xAxisData.push(i.name)
      })
      this.stackBarLineOp.xAxis[0].data = xAxisData
      this.stackBarLineOp.series[0].data = barData1
      this.stackBarLineOp.series[1].data = barData2
      this.stackBarLineOp.series[2].data = lineData
    })
  }
  // 排序
  sortChange1(column: object) {
    const data = column
    let sortName = ''
    let sortType = ''
    for (const key in column) {
      if (Object.prototype.hasOwnProperty.call(column, key)) {
        sortName = key
        sortType = column[key]
      }
    }
    this.tableParams.order = replace(sortType, 'ending', '')
    this.tableParams.sort = sortName
    this.getTableData()
  }
  sortChange2(column: object) {
    const data = column
    let sortName = ''
    let sortType = ''
    for (const key in column) {
      if (Object.prototype.hasOwnProperty.call(column, key)) {
        sortName = key
        sortType = column[key]
      }
    }
    this.dialogTableParams.order = replace(sortType, 'ending', '')
    this.dialogTableParams.sort = sortName
    this.getDialogTableData()
  }
  // 根据结束时间联动，不能大于结束时间
  startDisable(time: Date) {
    const endDateVal = this.formDate.getValue().endDate
    if (endDateVal) {
      return time.getTime() > new Date(endDateVal).getTime()
    }
  }
  // 根据开始时间联动，只能选择开始时间之前
  endDisable(time: Date) {
    const beginDateVal = this.formDate.getValue().startDate
    if (beginDateVal) {
      return time.getTime() < new Date(beginDateVal).getTime() - 1 * 24 * 60 * 60 * 1000
    }
  }
  // 表格翻页
  handleCurrentChange1(page: number) {
    this.tableParams.page = page
    this.getTableData()
  }
  // 表格页码
  handleSizeChange1(val: number) {
    this.tableParams.rows = val
    this.tableParams.page = 1
    this.tableOpt.pageOpt.currentPage = 1
    this.getTableData()
  }
  // dialog表格翻页
  handleCurrentChange2(page: number) {
    this.dialogTableParams.page = page
    this.getDialogTableData()
  }
  // dialog表格页码
  handleSizeChange2(val: number) {
    this.dialogTableParams.rows = val
    this.dialogTableParams.page = 1
    this.dialogTableOpt.pageOpt.currentPage = 1
    this.getDialogTableData()
  }
}
</script>
<style module="flowUser">
.main {
  width: 100%;
  height: 100%;
  text-align: left;
}
.dateBox {
  height: 40px;
}
.contentBox {
  height: calc(100% - 50px);
  margin-top: 10px;
}
.chartBox {
  height: calc(55% - 10px);
  margin-bottom: 10px;
}
.charWrap {
  height: calc(100% - 38px);
}
.tableBox {
  height: 45%;
}
.tabsBox {
  display: flex;
  justify-content: space-between;
}
.infoBox span {
  font-size: 12px;
}
.infoBox span:first-child {
  margin-right: 20px;
}
.infoBox i {
  color: #409eff;
  font-weight: 600;
}
</style>
