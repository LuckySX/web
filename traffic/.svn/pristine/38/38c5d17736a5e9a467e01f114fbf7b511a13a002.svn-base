/*
 * @Author: fuping
 * @Date: 2020-03-19 14:26:18
 * @LastEditors: fuping
 * @LastEditTime: 2020-05-13 09:54:32
 * @Description:
 */
import { Module, MutationTree, ActionTree, ActionContext, GetterTree } from 'vuex'
import { RootState } from './../store'
import { getCookies, setCookies, removeCookies, setSession, getSession } from '@/utils/cookiesUtil'

export interface IUserState {
  token: string
  loginState: Boolean
  clientId: string
  clientSecret: string
  STATE: string
}

const userState: IUserState = {
  token: '',
  loginState: false,
  clientId: 'AQJCGZ',
  clientSecret: '32d7f497c0124be1bcd1551c110b4d24',
  STATE: '24be1bcd1551c110b4d24'
}

const mutations: MutationTree<IUserState> = {
  tokenState(state: IUserState, payload: any) {
    state.token = payload
  },
  loginState(state: IUserState, payload: any) {
    state.loginState = payload
  }
}

const actions: ActionTree<IUserState, RootState> = {
  /**
   * 设置loginState状态
   * @param context
   * @param param
   */
  SET_TOKEN(context: ActionContext<IUserState, RootState>, param: any) {
    context.commit('tokenState', param.token)
  },
  RESET_TOKEN(context: ActionContext<IUserState, RootState>, param: any) {
    removeCookies('token')
    context.commit('tokenState', '')
    location.reload()
  },
  setLoginState(context: ActionContext<IUserState, RootState>, param: any) {
    context.commit('loginState', param.loginState)
    // setCookies({ loginState: param.loginState })
    setSession({ loginState: param.loginState })
  }
}

const getters: GetterTree<IUserState, RootState> = {
  getTokenState(state: IUserState) {
    return state.token
  },
  getClientId(state: IUserState) {
    return state.clientId
  },
  getClientSecret(state: IUserState) {
    return state.clientSecret
  },
  getState(state: IUserState) {
    return state.STATE
  },
  getLoginState(state: IUserState) {
    if (getSession('loginState')) {
      state.loginState = Boolean(getSession('loginState'))
    }
    return state.loginState
  }
}

const user: Module<IUserState, RootState> = {
  namespaced: true,
  state: userState,
  getters,
  actions,
  mutations
}

export default user
