<!--
 * @Author: fuping
 * @Date: 2020-05-19 22:00:35
 * @LastEditors: niumiaomiao
 * @LastEditTime: 2020-07-22 09:36:35
 * @Description: 
-->
<template>
  <div :class="domainOverview.container">
    <div :class="domainOverview.chartPart">
      <div :class="domainOverview.chartBox">
        <BorderBox title="本周恶意域名访问" type="bar">
          <BaseCharts :option="barOption"></BaseCharts>
        </BorderBox>
      </div>
      <div :class="domainOverview.chartBox">
        <BorderBox title="恶意类型占比" type="pie">
          <BaseCharts :option="pieOption"></BaseCharts>
        </BorderBox>
      </div>
    </div>
    <div :class="domainOverview.tablePart">
      <BorderBox title="数据列表" type="table">
        <div :class="domainOverview.tableForm">
          <VForm :option="tableFormOp" ref="tableForm"></VForm>
        </div>
        <div :class="domainOverview.tableContent">
          <VTable
            class="domainOverview"
            :option="tableOpt"
            :height="tableHeight"
            ref="table"
            @handleCurrentPageChange="handleCurrentChange"
            @handleSizePageChange="handleSizeChange"
          ></VTable>
        </div>
      </BorderBox>
    </div>
    <el-dialog :title="tableTitle" :visible.sync="tableShow" width="70%">
      <VTable ref="table1" :option="dialogTableOpt" :height="dialogTableHeight"></VTable>
    </el-dialog>
  </div>
</template>

<script lang="ts">
import { doubleBarOption } from '@/views/Common/charts/doubleBarOption'
import { pieOption } from '@/views/Common/charts/pieOption'
import { Component, Vue, Ref } from 'vue-property-decorator'
import BorderBox from '@/components/Common/BorderBox.vue'
import { getCookies } from '@/utils/cookiesUtil'
import { defaultsDeep, trim, assign } from 'lodash'
import { http } from '@/common/request'
const UrlMalicious = '/netSecur-web/newMalice/maliceType'
const UrlSource = '/netSecur-web/newMalice/sourece'
const UrlBar = '/netSecur-web/newMalice/weekAccessStatistics'
const UrlPie = '/netSecur-web/newMalice/maliceTypeProportion'
const UrlTable = '/netSecur-web/newMalice/maliceOverviewList'
const UrlDialogTable = '/netSecur-web/newMalice/maliceOverviewTop'
const UrlExport = process.env.VUE_APP_BASE_API + '/netSecur-web/newMalice/maliceOverviewExprot'
interface IDefaultTableItems {
  domain: string
  type: string
  source: string
  sort: string
  order: string
  page: number
  rows: number
}
interface IDomainBar {
  xAxisData: string[]
  data: []
}
interface IDomainPie {
  name: string
  value: number
}
interface IDomainTable {
  rows: number[]
  total: number
}
// 导出，error提示没有数据不能导出，success可以导出
enum exportFlag {
  success = 1,
  error = 0
}
@Component({
  components: {
    BorderBox
  }
})
export default class Overall extends Vue {
  @Ref() readonly tableForm!: VP.VForm
  @Ref() readonly table!: VP.VTable
  @Ref() readonly table1!: VP.VTable
  private tableData: number[] = []
  private tableShow = false
  private tableTitle = ''
  private tableTitleDomain: string
  private tableFormOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '域名：',
        type: 'text',
        comOpt: {
          id: 'domain',
          width: 150,
          disabled: false,
          show: true,
          placeholder: '请输入域名',
          value: ''
        }
      },
      {
        label: '恶意类型：',
        type: 'select',
        comOpt: {
          id: 'type',
          width: 150,
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: []
        }
      },
      {
        label: '来源：',
        type: 'select',
        comOpt: {
          id: 'source',
          width: 150,
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: []
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          disabled: false,
          click: this.handleTableQueryBtn
        }
      },
      {
        comOpt: {
          id: 'reset',
          value: '重置',
          disabled: false,
          click: this.handleTableResetBtn
        }
      },
      {
        comOpt: {
          id: 'export',
          value: '导出',
          disabled: false,
          click: this.handleTableExportBtn
        }
      }
    ]
  }
  // 表格条件选择器
  private tableformItems: IDefaultTableItems = {
    domain: '',
    type: '',
    source: '',
    sort: 'count',
    order: 'desc',
    page: 1,
    rows: 5
  }
  private tableOpt: any = {
    stripe: true,
    sortMode: 'single',
    defaultSort: [{ prop: 'count', order: 'descending' }],
    sortChange: this.sortChange,
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: '域名', value: 'domain', minWidth: 120, tooltip: true },
      { name: '恶意类型', value: 'type', minWidth: 100, tooltip: true },
      { name: '来源', value: 'source', minWidth: 100, tooltip: true },
      { name: '用户数', value: 'count', minWidth: 100, sortable: 'custom', tooltip: true },
      { name: '连接数', value: 'links', minWidth: 100, sortable: 'custom', tooltip: true },
      {
        name: 'TOP10访问用户',
        value: '',
        align: 'center',
        width: 140,
        operations: [
          {
            label: '查看',
            tooltip: function(row: any) {
              return row.domain + '-用户访问数据'
            },
            disCallBack() {
              return false
            },
            handlerClick: this.dialogTable
          }
        ]
      }
    ],
    data: [],
    pagination: true,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [5, 10, 20, 30, 40, 50],
      pageSize: 5
    }
  }
  private tableHeight = 'calc(100% - 32px)'
  // 弹出框表格接口参数
  private dialogTableParams = {
    domain: this.tableTitleDomain,
    sort: 'links',
    order: 'desc'
  }
  private dialogTableOpt: any = {
    stripe: true,
    defaultSort: [{ prop: 'links', order: 'descending' }],
    defaultOrder: 'descending',
    sortChange: this.sortChange2,
    sortMode: 'single',
    column: [
      // { name: '序号', value: 'orderNum', width: 55 },
      { name: 'IP', value: 'ip', minWidth: 130, sortable: 'custom', tooltip: true },
      { name: '访问量', value: 'links', sortable: 'custom', tooltip: true },
      { name: '地市', value: 'city', sortable: 'custom', tooltip: true }
    ],
    data: [],
    pagination: false
  }
  private dialogTableHeight = '350'
  private newPeiOp = {
    tooltip: {
      show: false
    },
    legend: {
      show: true,
      orient: 'horizontal',
      itemWidth: 3,
      itemHeight: 15,
      left: 'center',
      right: 'auto',
      top: 'auto',
      bottom: 0
    },
    series: [
      {
        type: 'pie',
        center: ['50%', '40%'],
        radius: ['40%', '60%'],
        itemStyle: {
          normal: {
            borderColor: '#fff',
            borderWidth: 2
          }
        },
        avoidLabelOverlap: false,
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            formatter: params => {
              return params.percent + '%\n' + params.name
            }
          }
        },
        data: []
      }
    ]
  } as any
  private barOption: any = defaultsDeep(doubleBarOption)
  private pieOption: any = defaultsDeep(this.newPeiOp, pieOption)
  private exportType: exportFlag = exportFlag.error
  mounted() {
    this.getMalicious()
    this.getSource()
    this.init()
  }
  // methods
  init() {
    this.getBarData()
    this.getPieData()
    this.getTableData()
  }
  // 获取恶意类型
  getMalicious() {
    http.post<IDomainPie>(UrlMalicious).then((resp: any) => {
      const { data } = resp
      this.tableForm.setItemData('type', data)
      this.tableForm.setValue([{ id: 'type', value: '' }])
    })
  }
  // 获取来源类型
  getSource() {
    http.post<IDomainPie>(UrlSource).then((resp: any) => {
      const { data } = resp
      this.tableForm.setItemData('source', data)
      this.tableForm.setValue([{ id: 'source', value: '' }])
    })
  }
  // 表格查询按钮
  handleTableQueryBtn() {
    // 点击查询按钮表格就恢复默认排序
    this.table.initSort()
    this.tableItemFormat()
  }
  tableItemFormat() {
    assign(this.tableformItems, this.tableForm.getValue())
    this.tableformItems.domain = trim(this.tableformItems.domain)
    this.tableformItems.page = 1
    this.getTableData()
  }
  // 表格重置按钮
  handleTableResetBtn() {
    this.tableForm.clearValue()
  }
  // 表格导出按钮
  handleTableExportBtn() {
    if (this.exportType === 0) {
      this.$message({
        message: '无数据',
        type: 'warning'
      })
    } else {
      const { domain, type, source, sort, order } = this.tableformItems
      window.location.href = `${UrlExport}?type=${type}&sort=${sort}&order=${order}&source=${source}&domain=${domain}&token=${getCookies('token')}`
    }
  }
  // 格式化参数
  getParmas(data: any) {
    let parmas: any = ''
    for (const key in data) {
      parmas += `${key}=${data[key]}&`
    }
    return parmas.slice(0, -1)
  }
  // 获取柱图数据
  getBarData() {
    http.post<IDomainBar>(UrlBar).then((resp: any) => {
      const {
        data: [{ xAxisData, data }]
      } = resp
      this.barOption.series[0].data = data[0]
      this.barOption.series[1].data = data[1]
      this.barOption.xAxis.data = xAxisData
    })
  }
  // 获取散点图数据
  getPieData() {
    http.post<IDomainPie>(UrlPie).then((resp: any) => {
      const { data } = resp
      const legend = data.map(v => v.name)
      this.pieOption.legend.data = legend
      this.pieOption.series[0].data = data
    })
  }
  // 获取表格数据
  getTableData() {
    http.post<IDomainTable>(UrlTable, this.tableformItems).then((resp: any) => {
      const {
        data: { rows, total, pageNo }
      } = resp
      if (rows.length > 0) {
        this.exportType = exportFlag.success
      } else {
        this.exportType = exportFlag.error
      }
      this.tableOpt.data = rows
      this.tableOpt.pageOpt.total = total
      // this.tableOpt.pageOpt.currentPage = pageNo
    })
  }
  // 点击页码
  handleCurrentChange(page: number) {
    this.tableformItems.page = page
    this.getTableData()
  }
  handleSizeChange(val: number) {
    this.tableformItems.rows = val
    this.tableformItems.page = 1
    this.tableOpt.pageOpt.currentPage = 1
    this.getTableData()
  }
  // 排序
  sortChange(column: object) {
    const name: string = Object.keys(column)[0]
    if (column[name] === 'descending') {
      this.tableformItems.order = 'desc'
    } else {
      this.tableformItems.order = 'asc'
    }
    this.tableformItems.sort = name
    this.getTableData()
  }
  dialogTable(row: any) {
    this.tableShow = true
    this.tableTitleDomain = row.domain
    this.tableTitle = `${this.tableTitleDomain} 的访问用户TOP10`
    // 重置弹出框表格默认排序
    if (this.table1) {
      this.table1.initSort()
    }
    this.getDialogTableData()
  }
  getDialogTableData() {
    this.dialogTableParams.domain = this.tableTitleDomain
    this.dialogTableOpt.data = []
    http.post<IDomainTable>(UrlDialogTable, this.dialogTableParams).then((resp: any) => {
      const { data } = resp
      this.dialogTableOpt.data = data
    })
  }
  sortChange2(column: object) {
    const name: string = Object.keys(column)[0]
    if (column[name] === 'descending') {
      this.dialogTableParams.order = 'desc'
    } else {
      this.dialogTableParams.order = 'asc'
    }
    this.dialogTableParams.sort = name
    this.getDialogTableData()
  }
}
</script>
<style module="domainOverview">
.container {
  width: 100%;
  height: 100%;
  text-align: left;
}
.chartPart {
  display: flex;
  width: 100%;
  height: calc(45% - 10px);
  margin-bottom: 10px;
  justify-content: space-between;
}
.chartBox:nth-child(1) {
  width: calc(65% - 5px);
  height: 100%;
}
.chartBox:nth-child(2) {
  width: calc(35% - 5px);
  height: 100%;
}
.tablePart {
  width: 100%;
  height: 55%;
  overflow-x: scroll;
}
.tableForm {
  position: relative;
}
.tableContent {
  height: calc(100% - 40px);
}
</style>
