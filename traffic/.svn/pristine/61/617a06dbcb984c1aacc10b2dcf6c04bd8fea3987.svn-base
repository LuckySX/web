<!--
 * @Author: zhangjipei
 * @Date: 2020-03-25 09:27:42
 * @LastEditors: zhangjipei
 * @LastEditTime: 2020-03-30 14:59:59
 * @Description: 
 -->
<template>
  <div :class="Login.container">
    <div :class="Login.loginBox">
      <div :class="Login.title">登录</div>
      <ol :class="Login.inputGroup">
        <li>
          <label>用户名</label>
          <input
            v-model="loginForm.userName"
            type="text"
            name="user"
            @blur="loginBlur"
            @keyup.enter="loginKeyup"
          />
          <strong title=""></strong>
        </li>
        <li>
          <label>密码</label>
          <input
            v-model="loginForm.userPassword"
            type="password"
            name="pwd"
            @blur="loginBlur"
            @keyup.enter="loginKeyup"
            ref="loginPwd"
          />
          <strong title=""></strong>
        </li>
        <li>
          <label>验证码</label>
          <input
            v-model="loginForm.veryfycode"
            type="text"
            name="code"
            @blur="loginBlur"
            @keyup.enter="loginKeyup"
            ref="loginCode"
          />
          <b>
            <img
              :src="verificationSrc"
              :class="Login.verification"
              title="刷新"
              @click="changeVerification"
            />
          </b>
        </li>
        <li :class="Login.checkBox">
          <input v-model="loginForm.loginStatus" type="checkbox" name="checkbox" />
          <span>记住密码</span>
        </li>
        <li>
          <button @click="login" v-html="buttonValue"></button>
        </li>
      </ol>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Prop, Vue } from 'vue-property-decorator'
import { http } from '@/common/request'

@Component({})
export default class Login extends Vue {
  @Prop() private isLogin!: any

  private checkCookie = false
  private checkLoginVal = 0
  private buttonValue = '登&nbsp;&nbsp;&nbsp;录'
  private loginForm = {
    userName: '',
    userPassword: '',
    veryfycode: '',
    loginStatus: false
  }
  private verificationSrc = process.env.VUE_APP_BASE_API + '/netSecur-web/imageCode/getImage'
  // private loginData: this.isLogin;
  private changeVerification() {
    this.verificationSrc =
      process.env.VUE_APP_BASE_API + `/netSecur-web/imageCode/getImage?${new Date()}`
  }
  loginBlur(e) {
    const val = e.target.value
    const inputName = e.target.name
    if (inputName === 'user') {
      if (val === '') {
        this.$message('用户名不能为空')
        return false
      } else {
        this.getRememberInfo()
      }
    }
    if (inputName === 'pwd') {
      if (val === '') {
        this.$message('密码不能为空')
        return false
      }
    }
    if (inputName === 'code') {
      if (val === '') {
        this.$message('验证码不能为空')
        return false
      }
    }
  }
  loginKeyup(e) {
    const inputName = e.target.name
    if (inputName === 'code') {
      this.login()
      return false
    }
  }
  private setCookie(name, value, hours, path) {
    const names = escape(name)
    const values = escape(value)
    const expires = new Date()
    expires.setTime(expires.getTime() + hours * 3600000)
    path = path === '' ? '' : ';path=' + path
    const _expires = typeof hours === 'string' ? '' : ';expires=' + expires.toUTCString()
    document.cookie = names + '=' + values + _expires + path
  }
  private getCookieValue(name) {
    let names = escape(name)
    const allcookies = document.cookie
    names += '='
    const pos = allcookies.indexOf(names)
    if (pos !== -1) {
      const start = pos + names.length
      let end = allcookies.indexOf(';', start)
      if (end === -1) {
        end = allcookies.length
      }
      const value = allcookies.substring(start, end)
      return decodeURI(value)
    } else {
      return ''
    }
  }
  private getRememberInfo() {
    try {
      let userName = ''
      let userPassword = ''
      userName = this.getCookieValue('userName')
      userPassword = this.getCookieValue('userPassword')
      if (this.loginForm.userName === userName) {
        this.loginForm.userPassword = userPassword
        this.loginForm.loginStatus = true
        this.checkCookie = true
        return userPassword
      } else {
        this.checkCookie = false
        return false
      }
    } catch (err) {
      this.$message.error('NO RMB PASSWORD!')
    }
  }
  private deleteCookie(name, path) {
    const name1 = escape(name)
    const expires = new Date(0)
    path = path == '' ? '' : ';path=' + path
    document.cookie = name1 + '=' + ';expires=' + expires.toUTCString() + path
  }
  private login() {
    const username = this.loginForm.userName
    const password = this.loginForm.userPassword
    const tt = this.loginForm.loginStatus
    if (tt) {
      this.setCookie('userName', username, 168, '/')
      this.setCookie(
        'userPassword',
        this.checkCookie !== true ||
          (this.checkCookie === true && window.md5(password) === this.getRememberInfo()) ||
          (this.checkCookie === true &&
            window.md5(password) !== this.getRememberInfo() &&
            this.checkLoginVal !== 0)
          ? window.md5(password)
          : password,
        168,
        '/'
      )
    } else {
      const cuserName = this.getCookieValue('userName')
      if (username === cuserName) {
        this.deleteCookie('userName', '/')
        this.deleteCookie('userPassword', '/')
      }
    }
    this.checkLogin(username, password)
  }
  private checkLogin(username, password) {
    if (username === '') {
      this.$message('用户名不能为空')
      return false
    }
    if (password === '') {
      this.$message('密码不能为空')
      return false
    }
    const code = this.loginForm.veryfycode
    if (code === '') {
      this.$message('验证码不能为空')
      return false
    }
    http
      .post('/netSecur-web/login/login', {
        username: username,
        password:
          this.checkCookie !== true ||
          (this.checkCookie === true && window.md5(password) === this.getRememberInfo()) ||
          (this.checkCookie === true &&
            window.md5(password) !== this.getRememberInfo() &&
            this.checkLoginVal !== 0)
            ? window.md5(password)
            : password
      })
      .then((res: any) => {
        const result = res.data
        if (result === '0') {
          this.$message.error('用户名不存在，重新输入!')
          return false
        }
        if (result === '-111') {
          this.$message.error('该账号为锁定状态，不能登录!')
          return false
        }
        if (result === 'true') {
          this.checkImageCode(code, password)
          return false
        }
        if (result === '-1') {
          this.$message.error('连续输入错误密码5次，账号已被锁定!')
          return false
        }
        this.$message.error('密码错误!')
        this.checkLoginVal++
        return false
      })
  }
  private checkImageCode(code, password) {
    http
      .post('/netSecur-web/imageCode/checkImage', {
        checkCode: code,
        password:
          this.checkCookie !== true ||
          (this.checkCookie === true && window.md5(password) === this.getRememberInfo()) ||
          (this.checkCookie === true &&
            window.md5(password) !== this.getRememberInfo() &&
            this.checkLoginVal !== 0)
            ? window.md5(password)
            : password
      })
      .then((res: any) => {
        const result = res.data
        if (result === '200') {
          this.$message('密码过期，请修改!')
          this.goToPage()
          return false
        }
        if (result === '100') {
          this.$message('为了保证信息安全，请及时修改初始密码!')
          this.goToPage()
          return false
        }
        if (result === 'false') {
          this.$message.error('验证码输入有误，请重试!')
          return false
        }
        this.goToPage()
      })
  }
  private goToPage() {
    this.$emit('change', true)
    this.$router.push({
      path: '/menuIndex'
    })
    this.$ss.set('userId', 'admin')
  }
  private mounted() {
    this.changeVerification()
  }
}
</script>

<style module="Login">
.container {
  width: 100%;
  height: 100%;
  overflow: hidden;
  background: url('~@/assets/images/sys/loginBg.jpg') no-repeat;
  background-size: 100% 120%;
  background-position: 0;
  position: relative;
}
.loginBox {
  width: 460px;
  height: 350px;
  background: #fff;
  position: absolute;
  left: 50%;
  margin-left: -230px;
  top: 50%;
  margin-top: -175px;
  border-radius: 5px;
  box-sizing: border-box;
  padding: 25px 80px;
}
.title {
  font-size: 24px;
  color: #404040;
  text-align: center;
  letter-spacing: 5px;
  margin-bottom: 20px;
}
.inputGroup {
  padding: 0;
  margin: 0;
}
.inputGroup,
.inputGroup li {
  list-style: none;
}
.inputGroup li {
  position: relative;
  height: 50px;
  margin-bottom: 10px;
  display: flex;
  flex-direction: column;
}
.inputGroup li.checkBox {
  flex-direction: row;
  height: 20px;
  line-height: 20px;
}
.inputGroup li:last-child {
  margin-top: 15px;
}
.inputGroup li label {
  font-size: 15px;
  color: #266ebd;
  display: inline-block;
  margin-bottom: 5px;
  text-align: left;
}
.inputGroup li input {
  height: 30px;
  line-height: 30px;
  width: 100%;
  background: #fff;
  border-bottom: 1px solid #7b7b7b;
  font-size: 15px;
  outline: none;
}
.inputGroup li input[type='checkbox'] {
  width: 13px;
  height: 13px;
  display: inline-block;
  vertical-align: middle;
  margin-top: 4px;
  margin-right: 6px;
}
.inputGroup li input[type='button'],
.inputGroup li button {
  height: 40px;
  font-size: 18px;
  border-radius: 3px;
  border: none;
  color: #fff;
  background: linear-gradient(to right, #004bdd, #0076e5);
}
.inputGroup li input[type='button']:hover,
.inputGroup li button:hover {
  background: #0076e5;
}
.inputGroup li span {
  color: #376ebd;
  font-size: 13px;
  text-align: left;
}
.inputGroup li a {
  text-decoration: none;
  color: #fff;
  font-size: 13px;
  margin-left: 130px;
}
.inputGroup li b {
  position: absolute;
  right: 0px;
  top: 6px;
  height: 40px;
  width: 88px;
  text-align: center;
  font-size: 24px;
  line-height: 38px;
  color: #fff;
  animation: my1 1.5s linear infinite alternate;
  border: 1px solid #a09b9b;
}
.inputGroup li strong {
  display: inline-block;
  font-weight: normal;
  color: E25252;
  font-size: 14px;
  position: absolute;
  right: 5px;
  top: 30px;
}
.verification {
  cursor: pointer;
  margin-left: 5px;
  width: 80px;
  height: 35px;
}
</style>
