<!--
 * @Description: 运营商统计
 * @Autor: niumiaomiao
 * @Date: 2020-04-16 15:33:36
 * @LastEditors: niumiaomiao
 * @LastEditTime: 2020-05-06 16:33:13
 -->
<template>
  <div :class="operatorStatistics.main">
    <div :class="operatorStatistics.dateBox">
      <BorderBox title="筛选查询" type="search">
        <VForm :option="formDateOp" ref="form"></VForm>
      </BorderBox>
    </div>
    <div :class="operatorStatistics.contentBox">
      <div :class="operatorStatistics.barBox">
        <BorderBox title="运营商协议流量统计" type="bar">
          <BaseCharts :option="barStackOption" :theme="'vintage'"></BaseCharts>
        </BorderBox>
      </div>
      <div :class="operatorStatistics.lineBox">
        <BorderBox title="运营商流入流量变化" type="line">
          <BaseCharts :option="areaStackOption" :theme="'vintage'"></BaseCharts>
        </BorderBox>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Ref } from 'vue-property-decorator'
import { getAreaStackData, areaStackOption, barStackOption, getBarStackData } from '@/views/Common/charts/chartsOption'
import { http } from '@/common/request'
import defaultsDeep from 'lodash/defaultsDeep'
import dayjs from 'dayjs'
import BorderBox from '@/components/Common/BorderBox.vue'
const UrlOperatorLine = '/netSecur-web/operators/line'
const UrlOperatorBar = '/netSecur-web/operators/chart'
interface IOperator {
  category: string
  name: string
  value: string
}
interface IDefaultFormItems {
  startTime: string
  endTime: string
}
@Component({
  components: {
    BorderBox
  }
})
export default class OperatorStatistics extends Vue {
  @Ref() readonly form!: VP.VForm
  // 全局日期选择器
  private formItems: IDefaultFormItems = {
    startTime: dayjs().format('YYYY-MM-DD'),
    endTime: dayjs().format('YYYY-MM-DD')
  }
  private formDateOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '开始时间：',
        type: 'date',
        comOpt: {
          id: 'startTime',
          clearable: false,
          value: dayjs().format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.startDisable
          }
        }
      },
      {
        label: '结束时间：',
        type: 'date',
        comOpt: {
          id: 'endTime',
          clearable: false,
          value: this.formItems.endTime,
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.endDisable
          }
        }
      },
      {
        label: '运营商：',
        type: 'select',
        comOpt: {
          id: 'operator',
          value: '',
          width: 140,
          disabled: false,
          data: [
            { name: '全部', value: '' },
            { name: '移动', value: '移动' },
            { name: '电信', value: '电信' },
            { name: '联通', value: '联通' },
            { name: '铁通', value: '铁通' },
            { name: '其它', value: '其它' }
          ]
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.handleQueryBtn
        }
      }
    ]
  }
  // echarts图表配置参数
  private newAreaStackOption = {
    series: []
  } as any
  private newBarStackOption = {
    series: []
  } as any
  // private areaStackOption: any = []
  private areaStackOption: any = defaultsDeep(this.newAreaStackOption, areaStackOption)
  private barStackOption: any = defaultsDeep(this.newBarStackOption, barStackOption)
  mounted() {
    this.handleQueryBtn()
  }
  // 查询事件
  handleQueryBtn() {
    const formValue = this.form.getValue()
    http.post<IOperator>(UrlOperatorLine, formValue).then((resp: any) => {
      const { data } = resp
      if (data.length === 0) {
        data.push({
          name: '无数据',
          value: 0
        })
      }
      const { legendData, xAxisData, seriesData } = getAreaStackData(this.dataFormatLine(data))
      this.newAreaStackOption.legend.data = legendData
      this.newAreaStackOption.legend.left = 'right'
      this.newAreaStackOption.xAxis.data = xAxisData.length > 0 ? xAxisData : ['无数据']
      this.newAreaStackOption.series = seriesData
    })
    http.post<IOperator>(UrlOperatorBar, formValue).then((resp: any) => {
      const { data } = resp
      if (data.length === 0) {
        data.push({
          name: '无数据',
          value: 0
        })
      }
      const { legendData, xAxisData, seriesData } = getBarStackData(this.dataFormatLine(data))
      this.newBarStackOption.legend.data = legendData
      this.newBarStackOption.xAxis.data = xAxisData
      this.newBarStackOption.series = seriesData
    })
  }
  // 面积图数据处理
  dataFormatLine(data: any, unit = 'GB') {
    const arr1: string[] = []
    const arr2: any[] = []
    data = data.map((i: any) => {
      arr1.push(i.category)
      return {
        name: i.name,
        value: i.value,
        category: i.category,
        unit: unit
      }
    })
    const arr3 = Array.from(new Set(arr1))
    arr3.forEach((i: any) => {
      const arr4: any[] = []
      data.forEach((v: any) => {
        if (v.category === i) {
          arr4.push(v)
        }
      })
      arr2.push(arr4)
    })
    return arr2
  }
  // 根据结束时间联动，不能大于结束时间
  startDisable(time: Date) {
    const endDateVal = this.form.getValue().endTime
    if (endDateVal) {
      return time.getTime() > new Date(endDateVal).getTime()
    }
  }
  // 根据开始时间联动，只能选择开始时间之前
  endDisable(time: Date) {
    const beginDateVal = this.form.getValue().startTime
    if (beginDateVal) {
      return time.getTime() < new Date(beginDateVal).getTime() - 1 * 24 * 60 * 60 * 1000
    }
  }
}
</script>
<style module="operatorStatistics">
.main {
  width: 100%;
  height: 100%;
}
.dateBox {
  height: 40px;
}
.contentBox {
  height: calc(100% - 50px);
  margin-top: 10px;
}
.barBox {
  height: calc(50% - 10px);
  margin-bottom: 10px;
}
.lineBox {
  height: 50%;
}
</style>
