<!--
 * @Author: fuping
 * @Date: 2020-03-19 14:55:09
 * @LastEditors: fuping
 * @LastEditTime: 2020-04-15 22:03:53
 * @Description: DDoS攻击事件概览
 -->
<template>
  <div :class="overall.main">
    <div :class="overall.dateBox">
      <VForm :option="formDateOp" ref="formDate"></VForm>
    </div>
    <div :class="overall.contentBox">
      <div :class="overall.chartPart">
        <div :class="overall.chartBox">
          <BorderBox title="被攻击IP TOP5" type="bar">
            <BaseCharts v-if="loadedBar" :option="barOption" :theme="'vintage'" @handlerClick="handlerClickBar"></BaseCharts>
          </BorderBox>
        </div>
        <div :class="overall.chartBox">
          <BorderBox title="高峰攻击速率/ 连接数" type="scatter">
            <BaseCharts v-if="loadedScatter" :option="scatterOption" :theme="'vintage'"></BaseCharts>
          </BorderBox>
        </div>
      </div>
      <div :class="overall.tablePart">
        <BorderBox title="攻击事件" type="table" :class="overall.tableWrap">
          <div :class="overall.tableForm">
            <VForm :option="tableFormOp" ref="tableForm"></VForm>
          </div>
          <div :class="overall.tableContent">
            <Table
              :tableData="tableData"
              @handleCheck="handleTableClick"
              :class="overall.tableBox"
              @handleSelectionChange="handleSelectionChange"
            ></Table>
            <Pagination :option="pageOption" @handleCurrentChange="handleCurrentChange" @handleSizeChange="handleSizeChange"></Pagination>
          </div>
        </BorderBox>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
// @ is an alias to /src
import { Component, Vue, Ref } from 'vue-property-decorator'
import BorderBox from '@/components/Common/BorderBox.vue'
import { baseBarOption, baseScatterOption } from '@/views/Common/charts/chartsOption'
import Table from './components/Table.vue'
import Pagination from './components/Pagination.vue'
import { http } from '@/common/request'
import dayjs from 'dayjs'
import defaultsDeep from 'lodash/defaultsDeep'
import trim from 'lodash/trim'
import max from 'lodash/max'
Component.registerHooks(['beforeRouteEnter'])
const UrlIpTop5 = '/netSecur-web/newDDoS/getIpTop5' // 柱图数据url
const UrlScatterPointbyIp = '/netSecur-web/newDDoS/getScatterPointbyIp' // 散点图数据url
const UrlDDoSList = '/netSecur-web/newDDoS/getDDoSList' // 表格数据url
const UrlExport = process.env.VUE_APP_BASE_API + '/netSecur-web/newDDoS/excelExport' // 表格导出按钮url
interface IDefaultFormItems {
  beginTime: string
  endTime: string
  ip?: string
}
interface IDefaultTableItems {
  beginTime: string
  endTime: string
  primaryPort: string
  protocol: string
  attackType: string
  rank: string
  sort: string
  order: string
  page: number
  rows: number
  ip?: string // 多选
}
interface IParams {
  code: number
  data: number[]
  message: string
}
// 导出，error提示没有数据不能导出，success可以导出
enum exportFlag {
  success = 1,
  error = 0
}
@Component({
  components: {
    BorderBox,
    Table,
    Pagination
  }
})
export default class Overall extends Vue {
  @Ref() readonly formDate!: VP.VForm
  @Ref() readonly tableForm!: VP.VForm
  @Ref() readonly table!: VP.VTable
  private tableData: number[] = []
  // 全局日期选择器
  private formItems: IDefaultFormItems = {
    beginTime: dayjs().format('YYYY-MM-DD'),
    endTime: dayjs().format('YYYY-MM-DD')
  }
  // 协议类型
  private protocolOpt = [
    { name: '全部', value: '' },
    { name: 'TCP SYN', value: 1 },
    { name: 'ICMP', value: 2 },
    { name: 'DNS Flood', value: 3 },
    { name: 'UDP Flood', value: 4 },
    { name: 'HTTP Flood', value: 5 },
    { name: 'TCP Flood', value: 6 },
    { name: 'NTP Flood', value: 7 }
  ]
  // 疑似攻击类型
  private attackOpt = [
    { name: '全部', value: '' },
    { name: '资源消耗性攻击', value: 1 },
    { name: '服务消耗性攻击', value: 2 },
    { name: '反射类攻击', value: 3 },
    { name: '混合型攻击', value: 4 }
  ]
  // 危险等级
  private riskOpt = [
    { name: '全部', value: '' },
    { name: '低', value: 1 },
    { name: '中', value: 2 },
    { name: '高', value: 3 }
  ]
  private formDateOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '开始时间：',
        type: 'date',
        comOpt: {
          id: 'beginTime',
          clearable: false,
          value: dayjs().format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.startDisable
          }
        }
      },
      {
        label: '结束时间：',
        type: 'date',
        comOpt: {
          id: 'endTime',
          clearable: false,
          value: this.formItems.endTime,
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.endDisable
          }
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.handleQueryBtn
        }
      }
    ]
  }
  private tableFormOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '端口：',
        type: 'text',
        comOpt: {
          id: 'primaryPort',
          disabled: false,
          show: true,
          placeholder: '请输入',
          value: ''
        }
      },
      {
        label: '协议类型：',
        type: 'select',
        comOpt: {
          id: 'protocol',
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: this.protocolOpt
        }
      },
      {
        label: '疑似攻击类型：',
        type: 'select',
        comOpt: {
          id: 'attackType',
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: this.attackOpt
        }
      },
      {
        label: '危险等级程度：',
        type: 'select',
        comOpt: {
          id: 'rank',
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: this.riskOpt
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.handleTableQueryBtn
        }
      },
      {
        comOpt: {
          id: 'export',
          value: '导出',
          width: 90,
          disabled: false,
          click: this.handleTableExportBtn
        }
      }
    ]
  }
  // 表格条件选择器
  private tableformItems: IDefaultTableItems = {
    beginTime: this.formItems.beginTime,
    endTime: this.formItems.endTime,
    primaryPort: '',
    protocol: '',
    attackType: '',
    rank: '',
    sort: 'ip',
    order: 'desc',
    page: 1,
    rows: 5,
    ip: '' // 多选
  }
  // 多选
  private multipleSelection: string
  private loadedBar = false
  private loadedScatter = true
  private firstBarData: string
  // echarts bar
  private newBarOption = {
    yAxis: [
      {
        name: 'IP',
        data: []
      },
      {
        name: '攻击总流量'
      }
    ],
    series: [
      {
        data: []
      },
      {
        data: []
      }
    ]
  } as any
  private newScatterOp = {
    series: [
      {
        data: []
      }
    ]
  } as any
  private scatterData = [
    { name: '80', value: 30 },
    { name: '90', value: 80 }
  ]
  private barOption: any = defaultsDeep(this.newBarOption, baseBarOption)
  private scatterOption: any = defaultsDeep(this.newScatterOp, baseScatterOption)
  // 页码
  private pageOption: any = {
    total: 0,
    currentPage: 1
  }
  private exportType: exportFlag = exportFlag.error
  mounted() {
    this.handleQueryBtn()
  }
  beforeRouteEnter(to, from, next) {
    next(vm => {
      if (vm.$route.path !== '/DDosDetails') {
        vm.$route.meta.keepAlive = false
      } else {
        vm.$route.meta.keepAlive = true
      }
    })
  }

  // methods
  // 全局查询按钮
  handleQueryBtn() {
    this.formItems = this.formDate.getValue()
    this.tableformItems = defaultsDeep(this.tableForm.getValue(), this.tableformItems)
    this.tableformItems = defaultsDeep(this.formItems, this.tableformItems)
    this.tableformItems.page = 1
    this.getBarData()
    this.getTableData()
  }
  // 表格查询按钮
  handleTableQueryBtn() {
    this.tableformItems = defaultsDeep(this.tableForm.getValue(), this.tableformItems)
    this.tableformItems.primaryPort = trim(this.tableformItems.primaryPort)
    this.tableformItems.page = 1
    this.getTableData()
  }
  // 表格重置按钮
  handleTableResetBtn() {
    this.tableformItems = {
      beginTime: this.formItems.beginTime,
      endTime: this.formItems.endTime,
      primaryPort: '',
      protocol: '',
      attackType: '',
      rank: '',
      sort: 'ip',
      order: 'desc',
      page: 1,
      rows: 5
    }
  }
  // 表格导出按钮
  handleTableExportBtn() {
    if (this.exportType === 0) {
      this.$message({
        message: '无数据',
        type: 'warning'
      })
    } else {
      window.location.href = `${UrlExport}?${this.getParmas(this.tableformItems)}&type=1&eIp=${this.multipleSelection}`
    }
  }
  // 表格多选
  handleSelectionChange(val: any) {
    this.multipleSelection = val
  }
  // 格式化参数
  getParmas(data: any) {
    let parmas: any = ''
    for (const key in data) {
      parmas += `${key}=${data[key]}&`
    }
    return parmas.slice(0, -1)
  }
  // 获取柱图数据
  getBarData() {
    http.post<IParams>(UrlIpTop5, this.formItems).then((resp: any) => {
      const { data } = resp
      if (data.length === 0) {
        data.push({
          name: '无数据',
          value: 0
        })
      }
      const barData = data.sort((a: any, b: any) => {
        return a.value - b.value
      })
      const itemData: number[] = []
      const itemName: string[] = []
      barData.forEach((i: any) => {
        itemData.push(i.value)
        itemName.push(i.name)
      })
      const maxValue: any = max(itemData)
      this.barOption.series[0].data = barData
      this.barOption.series[1].data = itemData.map((val: any) => {
        val = maxValue
        return val
      })
      this.barOption.yAxis[0].data = itemName
      this.barOption.yAxis[1].data = itemData
      // 第一条数据
      this.firstBarData = barData.length > 0 ? barData[barData.length - 1].name : ''
      this.loadedBar = true
      this.getScatterData()
    })
  }
  // 获取散点图数据
  getScatterData() {
    const params: IDefaultFormItems = {
      beginTime: this.formItems.beginTime,
      endTime: this.formItems.endTime,
      ip: this.firstBarData
    }
    http.post<IParams>(UrlScatterPointbyIp, params).then((resp: any) => {
      const { data } = resp
      const chartData: any = []
      data.forEach((i: any) => {
        chartData.push([i.packets, i.volumeRate])
      })
      this.scatterOption.series[0].data = chartData
    })
  }
  // 获取表格数据
  getTableData() {
    http.post<IParams>(UrlDDoSList, this.tableformItems).then((resp: any) => {
      const {
        data: { rows, total, pageNo }
      } = resp
      if (rows.length > 0) {
        this.exportType = exportFlag.success
      } else {
        this.exportType = exportFlag.error
      }
      this.tableData = rows
      this.pageOption.total = total
      this.pageOption.currentPage = pageNo
    })
  }
  // 点击柱图事件
  handlerClickBar(e: any) {
    this.firstBarData = e.name
    this.getScatterData()
  }
  // 点击页码
  handleCurrentChange(page: number) {
    this.tableformItems.page = page
    this.getTableData()
  }
  handleSizeChange(val: number) {
    this.tableformItems.rows = val
    this.tableformItems.page = 1
    this.pageOption.currentPage = 1
    this.getTableData()
  }
  //点击表格跳转事件
  handleTableClick(val: any) {
    this.$router.push({
      path: '/DDosDetails',
      query: {
        beginTime: val.beginTime,
        endTime: val.endTime,
        ip: val.ip
      }
    })
  }
  // 根据结束时间联动，不能大于结束时间
  startDisable(time: Date) {
    const endDateVal = this.formDate.getValue().endTime
    if (endDateVal) {
      return time.getTime() > new Date(endDateVal).getTime()
    }
  }
  // 根据开始时间联动，只能选择开始时间之前
  endDisable(time: Date) {
    const beginDateVal = this.formDate.getValue().beginTime
    if (beginDateVal) {
      return time.getTime() < new Date(beginDateVal).getTime()
    }
  }
}
</script>
<style module="overall">
.main {
  width: 100%;
  height: 100%;
  text-align: left;
}
.dateBox {
  height: 40px;
}
.contentBox {
  height: calc(100% - 40px);
}
.chartPart {
  display: flex;
  width: 100%;
  height: calc(35% - 10px);
  margin-bottom: 10px;
  justify-content: space-between;
}
.chartBox {
  width: calc(50% - 5px);
  height: 100%;
}
.tablePart {
  width: 100%;
  height: 65%;
  overflow-x: scroll;
}
.tableForm {
  position: relative;
}
.tableContent {
  height: calc(100% - 40px);
}
.tableBox {
  height: calc(100% - 30px);
}
.tableWrap {
  min-width: 1280px;
}
</style>
