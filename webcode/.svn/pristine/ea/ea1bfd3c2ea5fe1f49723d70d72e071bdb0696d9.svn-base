<!--
 * @Description: 地域统计
 * @Autor: niumiaomiao
 * @Date: 2020-04-16 15:33:36
 * @LastEditors: niumiaomiao
 * @LastEditTime: 2020-05-08 10:53:29
 -->
<template>
  <div :class="regionStatistics.main">
    <div :class="regionStatistics.dateBox">
      <BorderBox title="筛选查询" type="search">
        <VForm :option="formDateOp" ref="formDate"></VForm>
      </BorderBox>
    </div>
    <div :class="regionStatistics.btnBox">
      <span
        v-for="(item, index) in btnArr"
        :key="item.name"
        :class="[regionStatistics.changeBtn, btnActive == index ? regionStatistics.active : '']"
        @click="changeOpt(index, item.value)"
      >
        {{ item.name }}
      </span>
    </div>
    <div :class="regionStatistics.contentBox">
      <div :class="regionStatistics.barBox">
        <BorderBox title="" type="table">
          <BaseCharts :option="areaStackOption" :theme="'vintage'"></BaseCharts>
        </BorderBox>
      </div>
      <div :class="regionStatistics.barBox">
        <BorderBox title="" type="table">
          <VTable :option="tableOpt" :height="tableHeight" ref="table"></VTable>
        </BorderBox>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Ref } from 'vue-property-decorator'
import { areaStackOption, getAreaStackData } from '@/views/Common/charts/chartsOption'
import dayjs from 'dayjs'
import BorderBox from '@/components/Common/BorderBox.vue'
import { http } from '@/common/request'
import defaultsDeep from 'lodash/defaultsDeep'
import replace from 'lodash/replace'
const UrlRegionLine = '/netSecur-web/areaNew/diagram'
const UrlRegionTable = '/netSecur-web/areaNew/tableForWebIP'
interface IRegionLine {
  category: string
  name: string
  value: number
}
interface IRegionTable {
  rows: number[]
  total: number
}
interface IDefaultFormItems {
  startDate: string
  endDate: string
}
interface IDefaultTableItems {
  startDate: string
  endDate: string
  index: number
  area: string
  sort: string
  order: string
}
@Component({
  components: {
    BorderBox
  }
})
export default class RegionStatistics extends Vue {
  @Ref() readonly formDate!: VP.VForm
  // 按钮切换选项
  private btnArr: object = [
    { name: '区域网站流量趋势', value: 0 },
    { name: '区域网站数趋势', value: 0 },
    { name: '区域网民流量趋势', value: 1 },
    { name: '区域网民数趋势', value: 1 }
  ]
  private btnActive = 0
  private formIndex = 0
  // 全局日期选择器
  private formItems: IDefaultFormItems = {
    startDate: dayjs().format('YYYY-MM-DD'),
    endDate: dayjs().format('YYYY-MM-DD')
  }
  private formDateOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '开始时间：',
        type: 'date',
        comOpt: {
          id: 'startDate',
          clearable: false,
          value: dayjs().format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.startDisable
          }
        }
      },
      {
        label: '结束时间：',
        type: 'date',
        comOpt: {
          id: 'endDate',
          clearable: false,
          value: this.formItems.endDate,
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.endDisable
          }
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.getAllData
        }
      }
    ]
  }
  private tableOpt: any = {}
  private tableWeb: any = {
    stripe: true,
    sortMode: 'single',
    sortChange: this.sortChange,
    defaultSort: [
      { prop: 'webnum', order: 'descending' },
      { prop: 'webup', order: '' },
      { prop: 'webdown', order: '' },
      { prop: 'webupBps', order: '' },
      { prop: 'webdownBps', order: '' }
    ],
    column: [
      { name: '区域', value: 'area' },
      { name: '活跃度', value: 'webnum', tooltip: true, sortable: 'custom' },
      { name: '网站请求流量(Bytes)', value: 'webup', tooltip: true, sortable: 'custom' },
      { name: '网站响应流量(Bytes)', value: 'webdown', tooltip: true, sortable: 'custom' },
      { name: '网站请求速率(bps)', value: 'webupBps', tooltip: true, sortable: 'custom' },
      { name: '网站响应速率(bps)', value: 'webdownBps', tooltip: true, sortable: 'custom' }
    ],
    data: [],
    pagination: false
  }
  private tableByte: any = {
    stripe: true,
    sortMode: 'single',
    sortChange: this.sortChange,
    defaultSort: [
      { prop: 'usernum', order: 'descending' },
      { prop: 'hostlink', order: '' },
      { prop: 'hostup', order: '' },
      { prop: 'hostdown', order: '' },
      { prop: 'hostupBps', order: '' },
      { prop: 'hostdownBps', order: '' }
    ],
    column: [
      { name: '区域', value: 'area' },
      { name: '活跃度', value: 'usernum', tooltip: true, sortable: true },
      { name: '连接数', value: 'hostlink', tooltip: true, sortable: true },
      { name: '主机上行流量', value: 'hostup', tooltip: true, sortable: true },
      { name: '主机下行流量', value: 'hostdown', tooltip: true, sortable: true },
      { name: '主机上行速率', value: 'hostupBps', tooltip: true, sortable: true },
      { name: '主机下行速率', value: 'hostdownBps', tooltip: true, sortable: true }
    ],
    data: [],
    pagination: false
  }
  private tableHeight = '100%'
  private newAreaStackOption = {
    series: []
  } as any
  private tableValue: IDefaultTableItems = {
    startDate: this.formItems.startDate,
    endDate: this.formItems.endDate,
    index: 0,
    area: '',
    sort: 'webnum',
    order: 'desc'
  }
  private areaStackOption: any = defaultsDeep(this.newAreaStackOption, areaStackOption)
  mounted() {
    this.tableOpt = this.tableWeb
    this.getAllData()
  }
  // 排序
  sortChange(column: object) {
    const data = column
    let sortName = ''
    let sortType = ''
    for (const key in column) {
      if (Object.prototype.hasOwnProperty.call(column, key)) {
        sortName = key
        sortType = column[key]
      }
    }
    this.tableValue.sort = sortName
    this.tableValue.order = replace(sortType, 'ending', '')
    this.getTableData()
  }
  getAllData() {
    this.handleQueryBtn()
    this.getTableData()
  }
  // 查询事件
  handleQueryBtn(val = 0) {
    const formValue = this.formDate.getValue()
    formValue.index = this.btnActive
    formValue.area = ''
    http.post<IRegionLine>(UrlRegionLine, formValue).then((resp: any) => {
      const { data } = resp
      if (data.length === 0) {
        data.push({
          name: '无数据',
          value: 0
        })
      }
      let unitString: string = ''
      if (val == 1 || val == 3) {
        unitString = '个'
      } else {
        unitString = 'GB'
      }
      const { legendData, xAxisData, seriesData } = getAreaStackData(this.dataFormatLine(data, unitString))
      this.newAreaStackOption.legend.data = legendData
      this.newAreaStackOption.legend.left = 'right'
      this.newAreaStackOption.xAxis.data = xAxisData
      this.newAreaStackOption.position = function(point: any) {
        return [point[0], -100]
      }
      this.newAreaStackOption.series = seriesData
    })
  }
  getTableData() {
    this.tableValue.startDate = this.formDate.getValue().startDate
    this.tableValue.endDate = this.formDate.getValue().endDate
    this.tableValue.index = this.formIndex
    this.tableValue.area = ''
    http.post<IRegionTable>(UrlRegionTable, this.tableValue).then((resp: any) => {
      const { data } = resp
      this.tableOpt.data = data.rows
    })
  }
  // 面积图数据处理
  dataFormatLine(data: any, unit: string) {
    const arr1: string[] = []
    const arr2: any[] = []
    data = data.map((i: any) => {
      arr1.push(i.category)
      return {
        name: i.name,
        value: i.value,
        category: i.category,
        unit: unit
      }
    })
    const arr3 = Array.from(new Set(arr1))
    arr3.forEach((i: any) => {
      const arr4: any[] = []
      data.forEach((v: any) => {
        if (v.category === i) {
          arr4.push(v)
        }
      })
      arr2.push(arr4)
    })
    return arr2
  }
  // 选项卡切换
  private changeOpt(index, value) {
    this.btnActive = index
    this.formIndex = value
    if (index == 1 || index == 3) {
      this.newAreaStackOption.yAxis.name = '数量/个'
    } else {
      this.newAreaStackOption.yAxis.name = '流量/GB'
    }
    if (value === 1) {
      this.tableOpt = this.tableByte
    } else {
      this.tableOpt = this.tableWeb
    }
    this.handleQueryBtn(index)
    this.getTableData()
  }
  // 根据结束时间联动，不能大于结束时间
  startDisable(time: Date) {
    const endDateVal = this.formDate.getValue().endDate
    if (endDateVal) {
      return time.getTime() > new Date(endDateVal).getTime()
    }
  }
  // 根据开始时间联动，只能选择开始时间之前
  endDisable(time: Date) {
    const beginDateVal = this.formDate.getValue().startDate
    if (beginDateVal) {
      return time.getTime() < new Date(beginDateVal).getTime() - 1 * 24 * 60 * 60 * 1000
    }
  }
}
</script>
<style module="regionStatistics">
.main {
  width: 100%;
  height: 100%;
}
.dateBox {
  height: 40px;
}
.btnBox {
  height: 24px;
}
.changeBtn {
  display: inline-block;
  margin: 1px 0.5em 0 0;
  padding: 2px 10px;
  height: 22px;
  border: 1px solid #2593f3;
  color: #2593f3;
  cursor: pointer;
  font-size: 14px;
  text-align: center;
  line-height: 16px;
}
.changeBtn:hover,
.active {
  cursor: pointer;
  color: #fff;
  background: #2593f3;
}
.contentBox {
  height: calc(100% - 62px);
}
.barBox {
  height: calc(50% - 10px);
  margin-top: 10px;
}
</style>
