<!--
 * @Author: fuping
 * @Date: 2020-03-19 14:55:09
 * @LastEditors: Please set LastEditors
 * @LastEditTime: 2020-03-23 10:23:29
 * @Description: DDoS攻击事件概览
 -->
<template>
  <div :class="overall.main">
    <div :class="overall.dataBox">
      <el-form :inline="true" :model="formItems" label-position="left" label-width="80px">
        <el-form-item label="开始时间：">
          <el-date-picker
            v-model="formItems.beginTime"
            type="date"
            placeholder=""
            align="right"
            value-format="yyyy-MM-dd"
            :picker-options="startPickerOptions"
          ></el-date-picker>
        </el-form-item>
        <el-form-item label="结束时间：">
          <el-date-picker
            v-model="formItems.endTime"
            type="date"
            placeholder=""
            align="right"
            value-format="yyyy-MM-dd"
            :picker-options="endPickerOptions"
          ></el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="handleQueryBtn">查询</el-button>
        </el-form-item>
      </el-form>
    </div>
    <div :class="overall.contentBox">
      <div :class="overall.chartPart">
        <div :class="overall.chartBox">
          <BorderBox title="被攻击IP TOP 5" type="bar">
            <BaseCharts
              v-if="loadedBar"
              :option="barOption"
              :theme="'vintage'"
              @handlerClick="handlerClickBar"
            ></BaseCharts>
          </BorderBox>
        </div>
        <div :class="overall.chartBox">
          <BorderBox title="高峰攻击速率/ 连接数" type="scatter">
            <BaseCharts
              v-if="loadedScatter"
              :option="scatterOption"
              :theme="'vintage'"
            ></BaseCharts>
          </BorderBox>
        </div>
      </div>
      <div :class="overall.tablePart">
        <BorderBox title="攻击事件" type="table">
          <div :class="overall.tableForm">
            <el-form
              :inline="true"
              :model="tableformItems"
              label-position="left"
              label-width="100px">
              <el-form-item label="端口：" label-width="50px">
                <el-input v-model="tableformItems.port"></el-input>
              </el-form-item>
              <el-form-item label="协议类型：" label-width="70px">
                <el-select v-model="tableformItems.protocolType" placeholder="请选择">
                  <el-option
                    v-for="item in protocolOpt"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="疑似攻击类型：">
                <el-select v-model="tableformItems.suspectedAttackType" placeholder="请选择">
                  <el-option
                    v-for="item in attackOpt"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="危险等级程度：">
                <el-select v-model="tableformItems.riskLevel" placeholder="请选择">
                  <el-option
                    v-for="item in riskOpt"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                  ></el-option>
                </el-select>
              </el-form-item>
              <el-form-item>
                <el-button type="primary" @click="handleTableQueryBtn">查询</el-button>
                <el-button type="primary" @click="handleTableResetBtn">重置</el-button>
                <el-button type="primary" @click="handleTableExportBtn">导出</el-button>
              </el-form-item>
            </el-form>
          </div>
          <div :class="overall.tableContent">
            <Table :tableData="tableData"></Table>
          </div>
        </BorderBox>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
// @ is an alias to /src
import { Component, Vue } from 'vue-property-decorator'
import BorderBox from '@/components/Common/BorderBox.vue'
import { baseBarOption, baseScatterOption } from '@/views/Common/charts/chartsOption'
import Table from './components/Table.vue'
import { http } from '@/common/request'
import { ECharts } from 'echarts'
import dayjs from 'dayjs'
import _ from 'lodash'

@Component({
  components: {
    BorderBox,
    Table
  }
})
export default class Overall extends Vue {
  private tableData: number[] = []
  // 全局日期选择器
  private formItems = {
    beginTime: dayjs().format('YYYY-MM-DD'),
    endTime: dayjs().format('YYYY-MM-DD')
  }
  // 只能选择开始时间之前
  private startPickerOptions = {
    disabledDate: (time: any) => {
      const endDateVal = this.formItems.endTime
      if (endDateVal) {
        return time.getTime() > new Date(endDateVal).getTime()
      }
    }
  }
  // 只能选择当前时间之后
  private endPickerOptions = {
    disabledDate: (time: any) => {
      const beginDateVal = this.formItems.beginTime
      if (beginDateVal) {
        return time.getTime() < new Date(beginDateVal).getTime()
      }
    }
  }
  // 表格条件选择器
  private tableformItems: Record<string, any> = {
    port: '',
    protocolType: '',
    suspectedAttackType: '',
    riskLevel: ''
  }
  // 协议类型
  private protocolOpt = [
    { label: '全部', value: '' },
    { label: '移动', value: 1 },
    { label: '联通', value: 2 },
    { label: '电信', value: 3 }
  ]
  // 疑似攻击类型
  private attackOpt = [
    { label: '全部', value: '' },
    { label: '移动', value: 1 },
    { label: '联通', value: 2 },
    { label: '电信', value: 3 }
  ]
  // 危险等级
  private riskOpt = [
    { label: '全部', value: '' },
    { label: '移动', value: 1 },
    { label: '联通', value: 2 },
    { label: '电信', value: 3 }
  ]

  private loadedBar = false
  private loadedScatter = true
  private firstBarData: string
  // echarts bar
  private newBarOption = {
    yAxis: [
      {
        name: 'IP',
        data: []
      },
      {
        name: '攻击总流量'
      }
    ],
    series: [
      {
        data: []
      },
      {
        data: []
      }
    ]
  } as any
  private newScatterOp = {
    series: [
      {
        data: []
      }
    ]
  } as any
  private scatterData = [
    { name: '80', value: 30 },
    { name: '90', value: 80 }
  ]
  private barOption: any = _.defaultsDeep(this.newBarOption, baseBarOption)
  private scatterOption: any = _.defaultsDeep(this.newScatterOp, baseScatterOption)
  private ei: any | ECharts = {}
  mounted() {
    this.handleQueryBtn()
  }
  // methods
  // 全局查询按钮
  private handleQueryBtn() {
    this.getBarData()
    this.getScatterData()
  }
  // 表格查询按钮
  private handleTableQueryBtn() {}
  // 表格重置按钮
  private handleTableResetBtn() {
    this.tableformItems = {
      port: '',
      protocolType: '',
      suspectedAttackType: '',
      riskLevel: ''
    }
  }
  // 表格导出按钮
  private handleTableExportBtn() {
    // console.log()
  }
  private getParmas(data: any) {
    let parmas = ''
    for (let key in data) {
        parmas += `${key}=${data[key]}&`;
    };
    return parmas.slice(0, -1)
  }
  // 获取柱图数据
  private getBarData() {
    http.get(`/newDDoS/getIpTop5?${this.getParmas(this.formItems)}`).then((res: any) => {
      const barData = res.data.sort((a, b) => {
        return a.value - b.value
      })
      const itemData: number[] = []
      const itemName: string[] = []
      barData.forEach((i: any) => {
        itemData.push(i.value)
        itemName.push(i.name)
      })
      const maxValue: any = _.max(itemData)
      this.barOption.series[0].data = barData
      this.barOption.series[1].data = itemData.map((i: any) => {
        return maxValue
      })
      this.barOption.yAxis[0].data = itemName
      this.barOption.yAxis[1].data = itemData
      // 第一条数据
      this.firstBarData = barData[barData.length - 1].name
      this.loadedBar = true
    })
  }
  // 获取散点图数据
  private getScatterData() {
    http.get(`/netSecur-web/newDDoS/getScatterPointbyIp?${this.getParmas(this.formItems)}&ip=${this.firstBarData}`).then((res: any) => {
      let chartData: any = []
      res.data.forEach((i: any) => {
        chartData.push([i.packets,i.volumeRate])
      })
      this.scatterOption.series[0].data = chartData
    })
  }
  // 获取表格数据
  private getTableData() {}
  // 点击柱图事件
  private handlerClickBar(e: any) {
    this.firstBarData = e.name
    this.getScatterData()
  }
}
</script>
<style module="overall">
.main {
  width: 100%;
  height: 100%;
}
.dataBox {
  height: 40px;
  text-align: left;
}
.contentBox {
  height: calc(100% - 40px);
}
.chartPart {
  display: flex;
  width: 100%;
  height: calc(40% - 10px);
  margin-bottom: 10px;
  justify-content: space-between;
}
.chartBox {
  width: calc(50% - 5px);
  height: 100%;
}
.tablePart {
  width: 100%;
  height: 60%;
}
.tableForm {
  text-align: left;
}
</style>
