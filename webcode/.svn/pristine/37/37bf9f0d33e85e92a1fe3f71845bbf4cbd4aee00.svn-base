<!--
 * @Author: fuping
 * @Date: 2020-06-19 09:58:28
 * @LastEditors: niumiaomiao
 * @LastEditTime: 2020-07-22 09:58:47
 * @Description: 
-->
<template>
  <div :class="DomainAccess.main">
    <div :class="DomainAccess.topBox">
      <BorderBox title="IP指标统计" type="bar">
        <div :class="DomainAccess.insertBox">
          <VForm :option="formTopOp" ref="formIp" :class="DomainAccess.dateBox"></VForm>
          <div :class="DomainAccess.contentLeft">
            <div :class="DomainAccess.titleName">
              IP 访问TOP5
            </div>
            <div :class="DomainAccess.container">
              <BaseCharts :option="sortBarOption" @handlerClick="handleChangeIp"></BaseCharts>
            </div>
          </div>
          <div :class="DomainAccess.contentCenter">
            <div :class="DomainAccess.titleName">
              访问二级域名TOP5
            </div>
            <div :class="DomainAccess.container">
              <BaseCharts :option="pieOption"></BaseCharts>
            </div>
          </div>
          <div :class="DomainAccess.contentRight">
            <div :class="DomainAccess.titleName">
              访问域名TOP10
            </div>
            <div :class="DomainAccess.container">
              <VTable :option="tableOpt" :height="tableHeight" ref="table"></VTable>
            </div>
          </div>
        </div>
      </BorderBox>
    </div>
    <div :class="DomainAccess.bottomBox">
      <BorderBox title="域名指标统计" type="bar">
        <div :class="DomainAccess.insertBox">
          <VForm :option="formBotOp" ref="formDomain" :class="DomainAccess.dateBox"></VForm>
          <div :class="DomainAccess.contentLeft">
            <div :class="DomainAccess.titleName">
              域名访问TOP5
            </div>
            <div :class="DomainAccess.container">
              <BaseCharts :option="sortBarOption2" @handlerClick="handleChangeDomain"></BaseCharts>
            </div>
          </div>
          <div :class="DomainAccess.contentCenter">
            <div :class="DomainAccess.titleName">
              访问区域分布TOP5
            </div>
            <div :class="DomainAccess.container">
              <BaseCharts :option="pieOption2"></BaseCharts>
            </div>
          </div>
          <div :class="DomainAccess.contentRight">
            <div :class="DomainAccess.titleName">
              趋势统计
            </div>
            <div :class="DomainAccess.container">
              <BaseCharts :option="lineDoubleOpt"></BaseCharts>
            </div>
          </div>
        </div>
      </BorderBox>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Ref } from 'vue-property-decorator'
import BorderBox from '@/components/Common/BorderBox.vue'
import { lineDoubleOpt } from '@/views/Common/charts/lineDoubleOpt'
import { sortBarOption, getSortBarData } from '@/views/Common/charts/sortBar'
import { pieOption } from '@/views/Common/charts/pieOption'
import { http } from '@/common/request'
import dayjs from 'dayjs'
import defaultsDeep from 'lodash/defaultsDeep'
const UrlSelectIp = '/domainVisit2/selectIp'
const UrlSelectVisitRegion = '/domainVisit2/selectVisitRegion'
const UrlSelectVisitDomain = '/domainVisit2/selectVisitDomain'
const UrlSelectDomain = '/domainVisit2/selectDomain'
const UrlSelectVisitRegion2 = '/domainVisit2/selectVisitRegion2'
const UrlSelectTrend = '/domainVisit2/selectTrend'
interface IParams {
  code: number
  data: number[]
  message: string
}
@Component({
  components: {
    BorderBox
  }
})
export default class Overall extends Vue {
  @Ref() readonly formIp!: VP.VForm
  @Ref() readonly formDomain!: VP.VForm
  private tableHeight = '100%'
  private formTopOp: any = {
    inline: true,
    items: [
      {
        label: '',
        type: 'date',
        comOpt: {
          id: 'ipDate',
          clearable: false,
          value: dayjs()
            .add(-1, 'day')
            .format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.timeDisable
          },
          change: this.getIpData
        }
      }
    ]
  }
  private formIpDate = ''
  private dip = ''
  private domain = ''
  private ipData = []
  private domainData = []
  private formBotOp: any = {
    inline: true,
    items: [
      {
        label: '',
        type: 'date',
        comOpt: {
          id: 'domainDate',
          clearable: false,
          value: dayjs()
            .add(-1, 'day')
            .format('YYYY-MM-DD'),
          type: 'date',
          disabled: false,
          pickOptions: {
            disabledDate: this.timeDisable
          },
          change: this.getDomainData
        }
      }
    ]
  }
  private formDomainDate = ''
  private tableOpt: any = {
    stripe: true,
    sortMode: 'single',
    defaultSort: [],
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: '域名', value: 'domain', tooltip: true },
      { name: '访问次数(万次)', value: 'scityCnt', tooltip: true }
    ],
    data: [],
    pagination: false,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [10, 20, 30, 40, 50],
      pageSize: 10
    }
  }
  private lineDoubleOpt: any = defaultsDeep(lineDoubleOpt)
  private pieLegendData: any = []
  private newPeiOp2 = {
    tooltip: {
      show: false
    },
    legend: {
      show: true,
      itemWidth: 3,
      itemHeight: 15,
      left: 'auto',
      right: '10',
      top: 'top',
      formatter: this.legendFormat
    },
    series: [
      {
        type: 'pie',
        center: ['30%', '50%'],
        radius: ['40%', '60%'],
        itemStyle: {
          normal: {
            borderColor: '#fff',
            borderWidth: 2
          }
        },
        avoidLabelOverlap: false,
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            formatter: params => {
              const value = params.data.info ? params.data.info.split('：')[2] : params.value
              return value + '个' + '\n' + params.name
            }
          }
        },
        data: []
      }
    ]
  } as any
  private newPeiOp = {
    tooltip: {
      show: false
    },
    legend: {
      show: true,
      itemWidth: 3,
      itemHeight: 15,
      left: 'auto',
      right: '10',
      top: 'top',
      formatter: this.legendFormat
    },
    series: [
      {
        type: 'pie',
        center: ['30%', '50%'],
        radius: ['40%', '60%'],
        itemStyle: {
          normal: {
            borderColor: '#fff',
            borderWidth: 2
          }
        },
        avoidLabelOverlap: false,
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            formatter: params => {
              const value = params.data.info ? params.data.info.split('：')[2] : params.value
              return value + '个' + '\n' + params.name
            }
          }
        },
        data: []
      }
    ]
  } as any
  private newSortBarOption = {
    series: [
      {
        type: 'bar',
        data: []
      },
      {
        type: 'bar',
        data: []
      }
    ],
    yAxis: [
      {
        data: []
      },
      {
        data: []
      }
    ]
  }
  private newSortBarOption2 = {
    series: [
      {
        type: 'bar',
        data: []
      },
      {
        type: 'bar',
        data: []
      }
    ],
    yAxis: [
      {
        data: []
      },
      {
        data: []
      }
    ]
  }
  private sortBarOption: any = defaultsDeep(this.newSortBarOption, sortBarOption)
  private sortBarOption2: any = defaultsDeep(this.newSortBarOption2, sortBarOption)
  private pieOption: any = defaultsDeep(this.newPeiOp, pieOption)
  private pieOption2: any = defaultsDeep(this.newPeiOp2, pieOption)
  // 获取域名访问TOP5
  getSelectIp() {
    http
      .post<IParams>(UrlSelectIp, {
        time: this.formIpDate
      })
      .then((resp: any) => {
        const data = resp.data.slice(0, 5)
        this.ipData = data
        this.newSortBarOption.yAxis[1].data = []
        const yAxisData: any = []
        data.forEach(item => {
          yAxisData.push(item.count)
        })
        this.newSortBarOption.yAxis[1].data = yAxisData
        const { seriesData } = getSortBarData(data, data[0].dip)
        this.newSortBarOption.series = seriesData
        if (data.length > 0) {
          this.handleChangeIp(data[0], 'mounted')
        }
      })
  }
  // 获取区域分布TOP5数据
  getSelectVisitRegion() {
    http
      .post<IParams>(UrlSelectVisitRegion, {
        time: this.formIpDate,
        dip: this.dip
      })
      .then((resp: any) => {
        const { data } = resp
        if (data.length === 0) {
          data.push({
            name: '无数据',
            value: 0
          })
        }
        let sum = 0
        const legend: any = {}
        const legendData: any = []
        // 计算饼图数据合
        data.forEach(v => {
          sum += Number(v.value)
        })
        // 求饼图legend数据，及计算legend百分比
        data.map(v => {
          legendData.push(v.name)
          return (legend[v.name] = Number(v.value) ? (Number(v.value / sum) * 100).toFixed(2) + '%' : '')
        })
        this.pieLegendData = legend
        this.pieOption.legend.data = legendData
        this.pieOption.series[0].data = data
      })
  }
  legendFormat(v) {
    return v + ' ' + this.pieLegendData[v]
  }
  // 获取表格数据
  getSelectVisitDomain() {
    http
      .post<IParams>(UrlSelectVisitDomain, {
        time: this.formIpDate,
        dip: this.dip
      })
      .then((resp: any) => {
        const { data } = resp
        this.tableOpt.data = data
      })
  }
  getSelectDomain() {
    http
      .post<IParams>(UrlSelectDomain, {
        time: this.formDomainDate
      })
      .then((resp: any) => {
        const data = resp.data.slice(0, 5)
        this.domainData = data
        this.newSortBarOption2.yAxis[1].data = []
        const yAxisData: any = []
        data.forEach(item => {
          yAxisData.push(item.count)
        })
        this.newSortBarOption2.yAxis[1].data = yAxisData
        const { seriesData } = getSortBarData(data, data[0])
        this.newSortBarOption2.series = seriesData
        if (data.length > 0) {
          this.handleChangeDomain(data[0], 'mounted')
        }
      })
  }
  // 获取区域分布TOP5数据2
  getSelectVisitRegion2() {
    http
      .post<IParams>(UrlSelectVisitRegion2, {
        time: this.formDomainDate,
        domain: this.domain
      })
      .then((resp: any) => {
        const { data } = resp
        if (data.length === 0) {
          data.push({
            name: '无数据',
            value: 0
          })
        }
        let sum = 0
        const legend: any = {}
        const legendData: any = []
        // 计算饼图数据合
        data.forEach(v => {
          sum += Number(v.value)
        })
        // 求饼图legend数据，及计算legend百分比
        data.map(v => {
          legendData.push(v.name)
          return (legend[v.name] = Number(v.value) ? (Number(v.value / sum) * 100).toFixed(2) + '%' : '')
        })
        this.pieLegendData = legend
        this.pieOption2.legend.data = legendData
        this.pieOption2.series[0].data = data
      })
  }
  // 获取趋势统计数据
  getSelectTrendData() {
    http
      .post<IParams>(UrlSelectTrend, {
        time: this.formDomainDate,
        domain: this.domain
      })
      .then((resp: any) => {
        const { data } = resp
        const { legendData, xAxisData, seriesData } = this.getBarStackData(this.dataFormatLine(data))
        this.lineDoubleOpt.xAxis.data = xAxisData
        this.lineDoubleOpt.series[0].data = seriesData[0]
        this.lineDoubleOpt.series[1].data = seriesData[1]
      })
  }
  // 只能选择三个月之前的数据
  // 根据结束时间联动，不能大于结束时间
  timeDisable(time: Date) {
    const beginDateVal = Date.now()
    if (beginDateVal) {
      return time.getTime() < new Date(beginDateVal).getTime() - 90 * 24 * 60 * 60 * 1000 || time.getTime() > new Date(beginDateVal).getTime()
    }
  }
  // 面积图数据处理
  dataFormatLine(data: any, unit = '万') {
    const arr1: string[] = []
    const arr2: any[] = []
    data = data.map((i: any) => {
      arr1.push(i.category)
      return {
        name: i.name,
        value: i.value,
        category: i.category,
        unit: unit
      }
    })
    const arr3 = Array.from(new Set(arr1))
    arr3.forEach((i: any) => {
      const arr4: any[] = []
      data.forEach((v: any) => {
        if (v.category === i) {
          arr4.push(v)
        }
      })
      arr2.push(arr4)
    })
    return arr2
  }
  // 折线数据转换
  getBarStackData(data: any) {
    const seriesData: any[] = []
    const legendData: Array<string> = []
    const xAxisData: Array<string> = []
    if (data && data != undefined && data.length > 0) {
      data[0].forEach((i: any) => {
        xAxisData.push(i.name)
      })
      data.forEach((item: any, index: any) => {
        const arry: any = []
        legendData.push(item[0].category)
        item.forEach((value: any) => {
          arry.push(value.value)
        })
        seriesData.push(arry)
      })
    }
    return { legendData, xAxisData, seriesData }
  }
  handleChangeIp(e, flag) {
    this.dip = flag == 'mounted' ? e.dip : e.name
    const { seriesData } = getSortBarData(this.ipData, this.dip)
    this.newSortBarOption.series = seriesData
    this.getSelectVisitRegion()
    this.getSelectVisitDomain()
  }
  handleChangeDomain(e, flag) {
    this.domain = flag == 'mounted' ? e.domain : e.name
    const { seriesData } = getSortBarData(this.domainData, this.domain)
    this.newSortBarOption2.series = seriesData
    this.getSelectVisitRegion2()
    this.getSelectTrendData()
  }
  getIpData() {
    this.formIpDate = this.formIp.getValue().ipDate
    this.dip = ''
    this.getSelectIp()
    // this.getSelectVisitRegion()
    // this.getSelectVisitDomain()
  }
  getDomainData() {
    this.formDomainDate = this.formDomain.getValue().domainDate
    this.domain = ''
    this.getSelectDomain()
    // this.getSelectVisitRegion2()
    // this.getSelectTrendData()
  }
  mounted() {
    this.getIpData()
    this.getDomainData()
  }
}
</script>
<style module="DomainAccess">
.main {
  width: 100%;
  height: 100%;
}
.insertBox {
  width: 100%;
  height: 100%;
  padding: 10px 0px 0px 0px;
  position: relative;
}
.dateBox {
  position: absolute;
  right: 0px;
  top: -40px;
}
.topBox {
  width: 100%;
  margin-bottom: 10px;
  height: calc(50% - 10px);
}
.bottomBox {
  width: 100%;
  height: 50%;
}
.contentLeft {
  width: 33%;
  height: 100%;
  background: url('~@/assets/images/domain/line.png') no-repeat right 0;
  background-size: 15px 100%;
  float: left;
}
.contentCenter {
  width: 33%;
  height: 100%;
  float: left;
  border-right: 1px dashed rgba(39, 71, 190, 0.2);
}
.contentRight {
  width: 34%;
  height: 100%;
  float: left;
  padding-left: 10px;
}
.titleName {
  height: 22px;
  line-height: 22px;
  font-size: 18px;
  color: #2747be;
}
.container {
  width: 100%;
  height: calc(100% - 22px);
}
</style>
