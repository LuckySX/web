<!--
 * @Description: 
 * @Autor: niumiaomiao
 * @Date: 2020-06-19 09:29:28
 * @LastEditors: zhangjipei
 * @LastEditTime: 2020-07-19 20:59:59
-->
<template>
  <div :class="tamperEvent.container">
    <div :class="tamperEvent.topPart">
      <BorderBox title="近一周被篡改情况统计" type="bar">
        <BaseCharts :option="heatmapOption" :theme="'vintage'"></BaseCharts>
      </BorderBox>
    </div>
    <div :class="tamperEvent.bottomPart">
      <div :class="tamperEvent.colPart">
        <BorderBox title="被篡改重要域名列表" type="table">
          <div :class="tamperEvent.tableForm">
            <VForm :option="tableFormOp" ref="tableForm"></VForm>
          </div>
          <div :class="tamperEvent.tableContent">
            <VTable
              class="tamperEvent"
              :option="tableOpt"
              :height="tableHeight"
              ref="table"
              @handleCurrentPageChange="handleCurrentChange"
              @handleSizePageChange="handleSizeChange"
            ></VTable>
          </div>
        </BorderBox>
      </div>
      <div :class="tamperEvent.colPart">
        <BorderBox title="近两周被篡改的域名总量变化情况" type="line">
          <BaseCharts :option="areaStackOption" :theme="'vintage'"></BaseCharts>
        </BorderBox>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue, Ref } from 'vue-property-decorator'
import { http } from '@/common/request'
import { areaStackOption, getAreaStackData } from '@/views/Common/charts/chartsOption'
import { heatmapOption } from '@/views/Common/charts/heatmap'
import BorderBox from '@/components/Common/BorderBox.vue'
import { defaultsDeep } from 'lodash'
import dayjs from 'dayjs'

const UrlHeatmap = '/newDomainChange/domainChanckWeek'
const UrlTable = '/newDomainChange/import'
const UrlLine = '/newDomainChange/twoWeekChange'

interface IDefaultTableItems {
  startTime: string
  endTime: string
  sort: string
  order: string
  page: number
  rows: number
}
interface IHeatmap {
  category: string
  info: string
  time: string
  value: string
}
interface ITable {
  rows: number[]
  total: number
}
interface ILine {
  category: string
  time: string
  value: number
}

@Component({
  components: {
    BorderBox
  }
})
export default class TamperEvent extends Vue {
  @Ref() readonly tableForm!: VP.VForm
  @Ref() readonly table!: VP.VTable
  private tableData: number[] = []
  private tableFormOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '',
        type: 'select',
        comOpt: {
          id: 'tableTime',
          value: 1,
          data: [
            { name: '最近一日', value: 0 },
            { name: '最近一周', value: 1 },
            { name: '最近一月', value: 2 }
          ],
          change: this.handleTableQueryBtn
        }
      }
    ]
  }
  private timeSelectList = [1, 6, 29]
  private tableformItems: IDefaultTableItems = {
    startTime:
      dayjs()
        .subtract(6, 'day')
        .format('YYYY-MM-DD') + ' 00:00:00',
    endTime:
      dayjs()
        .subtract(0, 'day')
        .format('YYYY-MM-DD') + ' 00:00:00',
    sort: 'time',
    order: 'desc',
    page: 1,
    rows: 5
  }
  private tableOpt: any = {
    stripe: true,
    sortMode: 'single',
    defaultSort: [{ prop: 'time', order: 'descending' }],
    sortChange: this.sortChange,
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: '域名', value: 'domain', minWidth: 120, sortable: 'custom', tooltip: true },
      { name: '发现时间', value: 'time', minWidth: 100, sortable: 'custom', tooltip: true }
    ],
    data: [],
    pagination: true,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [5, 10, 20, 30, 40, 50],
      pageSize: 5,
      pageCount: 5
    }
  }
  private tableHeight = 'calc(100% - 32px)'
  private newAreaStackOption = {
    series: []
  } as any
  private areaStackOption: any = defaultsDeep(this.newAreaStackOption, areaStackOption)
  private newHeatmapOption = {
    series: []
  } as any
  private heatmapOption: any = defaultsDeep(this.newHeatmapOption, heatmapOption)
  handleCurrentChange(page: number) {
    this.tableformItems.page = page
    this.getTableData()
  }
  handleSizeChange(val: number) {
    this.tableformItems.rows = val
    this.tableformItems.page = 1
    this.tableOpt.pageOpt.currentPage = 1
    this.getTableData()
  }
  sortChange(column: object) {
    const name: string = Object.keys(column)[0]
    if (column[name] === 'descending') {
      this.tableformItems.order = 'desc'
    } else {
      this.tableformItems.order = 'asc'
    }
    this.tableformItems.sort = name
    this.getTableData()
  }
  handleTableQueryBtn() {
    const timeSelect = this.tableForm.getValue().tableTime
    this.tableformItems.startTime =
      dayjs()
        .subtract(this.timeSelectList[timeSelect], 'day')
        .format('YYYY-MM-DD') + ' 00:00:00'
    this.getTableData()
  }
  getHeatmapData() {
    http
      .post<Array<IHeatmap>>(UrlHeatmap, {
        startTime:
          dayjs()
            .subtract(6, 'day')
            .format('YYYY-MM-DD') + ' 00:00:00',
        endTime: dayjs().format('YYYY-MM-DD') + ' 00:00:00'
      })
      .then((resp: any) => {
        // console.log(resp.data)
        let { data } = resp
        if (data === null) {
          data = []
        }
        if (data.length === 0) {
          data.push({
            time: '无数据',
            value: 0,
            info: '无数据',
            category: '无数据'
          })
        }
        let minNum = 0
        let maxNum = 0
        const axisData: any = [[], []]
        const seriesData: any = []
        const seriesData2: any = []
        minNum = parseInt(data[0].value)
        maxNum = parseInt(data[0].value)
        data.forEach((item: IHeatmap) => {
          item.info = item.category + ' ' + item.time + '<br/>'
          if (parseInt(item.value) === 0) {
            item.info += '未篡改'
          } else {
            item.info += '被篡改' + item.value + '次'
          }
          if (parseInt(item.value) > maxNum) {
            maxNum = parseInt(item.value)
          }
          if (parseInt(item.value) < minNum) {
            minNum = parseInt(item.value)
          }
          if (item.category === data[0].category) {
            axisData[0].push(item.time)
          }
          if (item.time === data[0].time) {
            axisData[1].push(item.category)
          }
          seriesData.push([item.time, item.category, item.value, item.info])
          if (parseInt(item.value) > 0) {
            seriesData2.push([item.time, item.category, item.value, item.info])
          }
        })
        axisData[1].reverse()
        if (minNum === maxNum) {
          maxNum = minNum + 1
        }
        seriesData.forEach(item => {
          item[2] = parseInt(item[2]) > minNum ? maxNum : minNum
        })
        this.newHeatmapOption.xAxis.data = axisData[0]
        this.newHeatmapOption.yAxis.data = axisData[1]
        this.newHeatmapOption.visualMap.min = minNum
        this.newHeatmapOption.visualMap.max = maxNum
        this.newHeatmapOption.series[0].data = seriesData
        this.newHeatmapOption.series[1].data = seriesData2
      })
  }
  getTableData() {
    http.post<ITable>(UrlTable, this.tableformItems).then((resp: any) => {
      // resp.data.rows.forEach((item, index) => {
      //   item.orderNum = index + 1
      // })
      const {
        data: { rows, total, pageNo }
      } = resp
      this.tableOpt.data = rows
      this.tableOpt.pageOpt.total = total
    })
  }
  getLineData() {
    http
      .post<Array<ILine>>(UrlLine, {
        startTime:
          dayjs()
            .subtract(14, 'day')
            .format('YYYY-MM-DD') + ' 00:00:00',
        endTime:
          dayjs()
            .subtract(1, 'day')
            .format('YYYY-MM-DD') + ' 00:00:00'
      })
      .then((resp: any) => {
        const { data } = resp
        if (data.length === 0) {
          data.push({
            name: '无数据',
            value: 0
          })
        }
        const { xAxisData, seriesData } = getAreaStackData(this.dataFormatLine(data))
        seriesData.forEach(item => {
          item.itemStyle.normal.color = '#0b56a7'
        })
        this.newAreaStackOption.xAxis.data = xAxisData.length > 0 ? xAxisData : ['无数据']
        this.newAreaStackOption.series = seriesData
      })
  }
  dataFormatLine(data: any, unit = '个') {
    const arr1: string[] = []
    const arr2: any[] = []
    data = data.map((i: any) => {
      // arr1.push(i.category)
      arr1.push('被篡改域名数')
      return {
        name: i.time,
        value: i.value,
        // category: i.category,
        category: '被篡改域名数',
        unit: unit
      }
    })
    const arr3 = Array.from(new Set(arr1))
    arr3.forEach((i: any) => {
      const arr4: any[] = []
      data.forEach((v: any) => {
        if (v.category === i) {
          arr4.push(v)
        }
      })
      arr2.push(arr4)
    })
    return arr2
  }
  mounted() {
    this.newAreaStackOption.yAxis.name = '被篡改域名数/个'
    // this.newAreaStackOption.grid.left = 45
    this.getHeatmapData()
    this.getTableData()
    this.getLineData()
  }
}
</script>
<style module="tamperEvent">
.container {
  width: 100%;
  height: 100%;
  text-align: left;
}
.topPart {
  position: relative;
  width: 100%;
  height: 55%;
  margin-bottom: 10px;
}
.bottomPart {
  display: flex;
  justify-content: space-between;
  width: 100%;
  height: calc(45% - 10px);
}
.colPart {
  width: calc(50% - 5px);
  height: 100%;
}
.tableForm {
  position: absolute;
  top: 0;
  right: 0;
}
.tableContent {
  height: 100%;
}
</style>
