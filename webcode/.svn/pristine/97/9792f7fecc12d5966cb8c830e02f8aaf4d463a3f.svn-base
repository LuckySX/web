<!--
 * @Author: shixiao
 * @Date: 2020-03-20 16:57:30
 * @LastEditTime: 2020-04-23 19:19:22
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \sz-new-FE\src\views\DDos\DDosDetails\index.vue
 -->
<template>
  <div :class="details.mainBox">
    <el-button :class="details.exitButton" type="primary" @click="handleExitButton">返回</el-button>
    <div :class="details.chartBox">
      <div :class="details.lineBox">
        <BorderBox title="攻击小时流量" type="line">
          <BaseCharts :option="lineStockOption" :theme="'vintage'"></BaseCharts>
        </BorderBox>
      </div>
      <div :class="details.pieBox">
        <div :class="details.pieTop">
          <BorderBox title="协议类型占比" type="pie">
            <BaseCharts :option="pieTypeOption" :theme="'vintage'"></BaseCharts>
          </BorderBox>
        </div>
        <div :class="details.pieBottom">
          <BorderBox title="端口分布TOP5" type="pie">
            <BaseCharts :option="peiTopOption" :theme="'vintage'"></BaseCharts>
          </BorderBox>
        </div>
      </div>
    </div>
    <div :class="details.tabaleBox">
      <BorderBox title="攻击源列表" type="table">
        <div :class="details.tableForm">
          <VForm :option="tableFormOp" ref="tableForm"></VForm>
        </div>
        <div :class="details.tableContent">
          <VTable
            :option="tableOpt"
            ref="table"
            :height="tableHeight"
            @handleCurrentPageChange="handleCurrentChange"
            @handleSizePageChange="handleSizeChange"
            @handleSelectionChange="handlerSelctAllClick"
          ></VTable>
        </div>
      </BorderBox>
    </div>
  </div>
</template>
<script lang="ts">
// @ is an alias to /src
import { Component, Vue, Ref } from 'vue-property-decorator'
import BorderBox from '@/components/Common/BorderBox.vue'
import Table from './components/Table.vue'
import { http } from '@/common/request'
import { lineOption, pieOption } from '@/views/Common/charts/chartsOption'
import _ from 'lodash'
import defaultsDeep from 'lodash/defaultsDeep'
Component.registerHooks(['beforeRouteEnter'])
const UrlProtocol = '/netSecur-web/newDDoS/getProtocolProportion'
const UrlDportTop5 = '/netSecur-web/newDDoS/getDportTop5'
const UrlFlowCurve = '/netSecur-web/newDDoS/getFlowCurve'
const UrlAttackers = '/netSecur-web/newDDoS/getAttackers'
const UrlExport = '/netSecur-web/newDDoS/excelExport'
interface TableItems {
  endTime: string | (string | null)[]
  beginTime: string | (string | null)[]
  ip: string | (string | null)[]
  sIp: string
  protocol: string
  page: number
  rows: number
}
interface ChartsItems {
  endTime: string | (string | null)[]
  beginTime: string | (string | null)[]
  ip: string | (string | null)[]
}
interface ChartsDataParams {
  code: number
  data: number[]
  message: string
}
@Component({
  components: {
    BorderBox,
    Table
  }
})
export default class Details extends Vue {
  @Ref() readonly tableForm!: VP.VForm
  @Ref() readonly table!: VP.VTable
  private lineOption = lineOption
  private pieOption = pieOption
  private isExport = true
  private tableData: number[] = []
  private tableHeight = '80%'
  private chartsParme: ChartsItems = {
    //事件结束时间
    endTime: '',
    //事件开始时间
    beginTime: '',
    //被攻击IP
    ip: ''
  }
  private tableParme: TableItems = {
    endTime: '',
    beginTime: '',
    ip: '',
    sIp: '',
    protocol: '',
    page: 1,
    rows: 5
  }
  // 协议类型
  private protocolOpt = [
    { name: '全部', value: '' },
    { name: 'TCP SYN', value: 1 },
    { name: 'ICMP', value: 2 },
    { name: 'DNS Flood', value: 3 },
    { name: 'UDP Flood', value: 4 },
    { name: 'HTTP Flood', value: 5 },
    { name: 'TCP Flood', value: 6 },
    { name: 'NTP Flood', value: 7 }
  ]
  // 导出 参数
  private exportParams: string
  private pieBaseOption = {
    series: [
      {
        data: []
      }
    ]
  } as any
  private pieBaseTopOption = {
    series: [
      {
        data: []
      }
    ]
  } as any
  private lineBaseTopOption = {
    xAxis: {
      data: []
    },
    series: [
      {
        data: []
      }
    ]
  } as any
  private pieTypeOption: any = defaultsDeep(this.pieBaseOption, pieOption)
  private peiTopOption: any = defaultsDeep(this.pieBaseTopOption, pieOption)
  private lineStockOption: any = defaultsDeep(this.lineBaseTopOption, lineOption)
  private tableFormOp: any = {
    inline: true,
    btnPos: 'left',
    items: [
      {
        label: '攻击者IP：',
        type: 'text',
        comOpt: {
          id: 'sIp',
          width: 150,
          disabled: false,
          show: true,
          placeholder: '请输入IP',
          value: ''
        }
      },
      {
        label: '协议类型：',
        type: 'select',
        comOpt: {
          id: 'protocol',
          width: 150,
          value: '',
          disabled: false,
          placeholder: '请选择',
          data: this.protocolOpt
        }
      }
    ],
    btns: [
      {
        comOpt: {
          id: 'query',
          value: '查询',
          width: 90,
          disabled: false,
          click: this.handleQueryBtn
        }
      },
      {
        comOpt: {
          id: 'export',
          value: '导出',
          width: 90,
          disabled: false,
          click: this.handleExportBtn
        }
      }
    ]
  }
  private tableOpt: any = {
    stripe: true,
    selection: true,
    column: [
      { name: '序号', value: 'orderNum', width: 55 },
      { name: '攻击者IP', value: 'sourceIp', minWidth: 180, tooltip: true },
      { name: '起始时间', value: 'beginTime', minWidth: 220, tooltip: true },
      { name: '攻击流量', value: 'volume', tooltip: true },
      { name: '峰值速率', value: 'volumeRate', tooltip: true },
      { name: '协议类型', value: 'protocol', tooltip: true },
      { name: '包数', value: 'packets', tooltip: true },
      { name: '连接数', value: 'concurrency', tooltip: true },
      { name: '端口', value: 'dport', tooltip: true }
    ],
    data: [],
    pagination: true,
    pageOpt: {
      currentPage: 1,
      total: 0,
      pageSizes: [5, 10, 20, 30, 40, 50],
      pageSize: 5
    }
  }
  mounted() {
    // 获取router传参
    this.getRouteParam()
    // 获取图表表格数据
    this.getDatas()
  }
  getParmas(data: any) {
    let parmas = ''
    for (const key in data) {
      parmas += `${key}=${data[key]}&`
    }
    return parmas.slice(0, -1)
  }
  handlerSelctAllClick(val: any) {
    const arr: any = []
    val.forEach(v => {
      arr.push(v.sourceIp)
    })
    this.exportParams = arr.toString()
  }
  // 查询按钮
  handleQueryBtn() {
    this.tableParme = defaultsDeep(this.tableForm.getValue(), this.tableParme)
    this.tableParme.page = 1
    this.getTableDatas()
  }
  // 导出按钮
  handleExportBtn() {
    if (this.isExport) {
      const el: any = this.$refs.table
      window.location.href = process.env.VUE_APP_BASE_API + `${UrlExport}?${this.getParmas(this.tableParme)}&type=2&eIp=${this.exportParams}`
      this.$message({
        message: '导出成功',
        type: 'success'
      })
      // 清空被选状态
      el.$refs.multipleTable.clearSelection()
    } else {
      this.$message({
        message: '无数据',
        type: 'warning'
      })
    }
  }
  // 获取页面数据
  getDatas() {
    http.post<ChartsDataParams>(UrlProtocol, this.chartsParme).then((res: any) => {
      const { data } = res
      this.pieTypeOption.series[0].data = data
      if (data.length === 0) {
        this.pieTypeOption.series[0].data.push({
          name: '无数据',
          value: 0
        })
      }
    })
    http.post<ChartsDataParams>(UrlDportTop5, this.chartsParme).then((res: any) => {
      const { data } = res
      this.peiTopOption.series[0].data = data
      if (data.length === 0) {
        this.peiTopOption.series[0].data.push({
          name: '无数据',
          value: 0
        })
      }
    })
    http.post<ChartsDataParams>(UrlFlowCurve, this.chartsParme).then((res: any) => {
      const { data } = res
      const lineValue: any = []
      const lineTime: string[] = []
      data.forEach((i: any) => {
        lineValue.push({
          name: i.time,
          value: i.value,
          info: i.info
        })
        lineTime.push(i.time)
      })
      this.lineStockOption.xAxis.data = lineTime
      this.lineStockOption.series[0].data = lineValue
      if (data.length === 0) {
        this.lineStockOption.series[0].data.push({
          name: '无数据',
          value: 0
        })
      }
    })
    this.getTableDatas()
  }
  // 获取表格数据
  getTableDatas() {
    http.post<ChartsDataParams>(UrlAttackers, this.tableParme).then((res: any) => {
      const { data } = res
      if (data.rows.length > 0) {
        this.isExport = true
      } else {
        this.isExport = false
      }
      // this.tableOpt.data = data.rows
      this.tableOpt.pageOpt.currentPage = data.pageNo
      this.tableOpt.pageOpt.total = data.total
    })
  }
  handleSizeChange(val) {
    this.tableParme.rows = val
    this.tableParme.page = 1
    this.currentPage = 1
    this.getTableDatas()
  }
  handleCurrentChange(val) {
    this.tableParme.page = val
    this.getTableDatas()
  }
  // 概览页面跳转传参
  getRouteParam() {
    const endTime = this.$route.query.endTime
    const ip = this.$route.query.ip
    const beginTime = this.$route.query.beginTime
    this.chartsParme.endTime = endTime
    this.tableParme.endTime = endTime
    this.chartsParme.beginTime = beginTime
    this.tableParme.beginTime = beginTime
    this.chartsParme.ip = ip
    this.tableParme.ip = ip
  }
  // 返回按钮
  handleExitButton() {
    this.$router.push({
      path: '/DDosOverall'
    })
    // this.$route.meta.isBack = true
  }
  //从攻击事件页面过来时缓存攻击页面
  beforeRouteEnter(to, from, next) {
    from.meta.keepAlive = true
    next()
  }
}
</script>
<style module="details">
.mainBox {
  box-sizing: border-box;
  height: 100%;
}
.chartBox {
  display: flex;
  height: calc(50% - 5px);
}
.tabaleBox {
  margin-top: 10px;
  height: calc(50% - 5px);
}
.lineBox {
  flex: 0 0 60%;
  padding-right: 10px;
  height: 100%;
}
.tableContent {
  height: calc(90% - 10px);
}
.pieBox {
  flex: 1;
  padding-left: 10px;
  height: 100%;
}
.pieTop {
  margin-bottom: 10px;
  height: 49%;
}
.pieBottom {
  height: 48%;
}
.tableForm {
  text-align: left;
}
.exitButton {
  position: absolute;
  top: 48px;
  right: 23px;
}
</style>
